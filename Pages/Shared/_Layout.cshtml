@using LoginSystem.Data
@using LoginSystem.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - TechShare</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <style>
        html, body {
            height: 100%;
        }

        body {
            display: flex;
            flex-direction: column;
        }

        main {
            flex: 1 0 auto;
        }

        footer {
            flex-shrink: 0;
            width: 100%;
        }

        .dropdown-menu {
            min-width: 300px;
            max-height: 400px;
            overflow-y: auto;
        }
    </style>
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-lg navbar-light bg-light shadow-sm">
            <div class="container-fluid">
                <a class="navbar-brand fw-bold" asp-page="/Index">TechShare</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#mainNavbar" aria-controls="mainNavbar" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="mainNavbar">
                    <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                        <li class="nav-item"><a class="nav-link" asp-page="/Index">Trang Chủ</a></li>
                        <li class="nav-item"><a class="nav-link" asp-page="/Exchange/Search">Tìm Kiếm Mặt Hàng</a></li>
                        <li class="nav-item"><a class="nav-link" asp-page="/Organization/Search">Tìm Kiếm Tổ Chức</a></li>
                        @if (User.Identity.IsAuthenticated)
                        {
                            <li class="nav-item"><a class="nav-link" asp-page="/Exchange/CreateItem">Tạo Mặt Hàng</a></li>
                            <li class="nav-item"><a class="nav-link" asp-page="/Exchange/ManageItems">Quản Lý Mặt Hàng</a></li>
                            <li class="nav-item"><a class="nav-link" asp-page="/Chat">Tin Nhắn</a></li>
                            <li class="nav-item"><a class="nav-link" asp-page="/Exchange/UserActivity">Hoạt Động Của Tôi</a></li>
                            if (User.FindFirst("OrganizationId")?.Value != null)
                            {
                                <li class="nav-item"><a class="nav-link" asp-page="/Organization/Details" asp-route-slug="@(await GetOrgSlug(User.FindFirst("OrganizationId")?.Value))">Tổ Chức Của Tôi</a></li>
                            }
                            else if (User.IsInRole("Admin"))
                            {
                                <li class="nav-item"><a class="nav-link" asp-page="/Organization/Create">Tạo Tổ Chức</a></li>
                            }
                            if (User.IsInRole("Delivery"))
                            {
                                <li class="nav-item"><a class="nav-link" asp-page="/Exchange/DeliveryOrders">Đơn Hàng Vận Chuyển</a></li>
                            }
                            if (User.IsInRole("SuperAdmin"))
                            {
                                <li class="nav-item"><a class="nav-link" asp-page="/Dashboard">Dashboard</a></li>
                                <li class="nav-item"><a class="nav-link" asp-page="/AdminRequests">Yêu Cầu Admin</a></li>
                            }
                        }
                    </ul>
                    <ul class="navbar-nav align-items-center">
                        @if (User.Identity.IsAuthenticated)
                        {
                            <!-- Notifications Dropdown -->
                            <li class="nav-item dropdown me-2">
                                <a class="nav-link position-relative" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-bell"></i>
                                    @{
                                        var unreadNotifications = await DbContext.Notifications
                                        .Where(n => n.UserId == UserManager.GetUserId(User) && !n.IsRead)
                                        .CountAsync();
                                    }
                                    <span id="notification-count" class="badge bg-danger rounded-pill position-absolute" style="top: 5px; right: -10px; @(unreadNotifications > 0 ? "" : "display: none;")">@unreadNotifications</span>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    @{
                                        var notifications = await DbContext.Notifications
                                        .Where(n => n.UserId == UserManager.GetUserId(User))
                                        .OrderByDescending(n => n.CreatedAt)
                                        .Take(5)
                                        .ToListAsync();
                                    }
                                    @if (notifications.Any())
                                    {
                                        foreach (var notification in notifications)
                                        {
                                            string redirectUrl = notification.Type switch
                                            {
                                                "ItemComment" => $"/Exchange/Item/{notification.ItemId}",
                                                "ItemRating" => $"/Exchange/Item/{notification.ItemId}",
                                                "ItemReport" => $"/Exchange/Item/{notification.ItemId}",
                                                "Order" => $"/Exchange/OrderDetails/{notification.OrderId}",
                                                "OrganizationJoin" or "OrganizationRoleChange" or "OrganizationComment" or "OrganizationReport" => $"/Organization/Details?slug={await GetOrgSlug(notification.OrganizationId)}",
                                                _ => "#"
                                            };
                                            <li>
                                                <a class="dropdown-item notification-item" href="@redirectUrl" data-notification-id="@notification.Id">
                                                    <small>@notification.Content</small><br />
                                                    <small class="text-muted">@notification.CreatedAt.ToString("dd/MM/yyyy HH:mm")</small>
                                                </a>
                                            </li>
                                        }
                                    }
                                    else
                                    {
                                        <li><span class="dropdown-item text-muted">Không có thông báo</span></li>
                                    }
                                    <li><hr class="dropdown-divider" /></li>
                                    <li><a class="dropdown-item text-center" asp-page="/Notifications">Xem Tất Cả</a></li>
                                </ul>
                            </li>
                            <!-- Messages Dropdown -->
                            <li class="nav-item dropdown me-2">
                                <a class="nav-link position-relative" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-envelope"></i>
                                    <span id="message-badge" class="badge bg-danger rounded-pill position-absolute" style="top: 5px; right: -10px; display: none;">!</span>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end messages-dropdown">
                                    @{
                                        var messages = await DbContext.Messages
                                        .Where(m => m.ReceiverId == UserManager.GetUserId(User))
                                        .OrderByDescending(m => m.CreatedAt)
                                        .Take(15)
                                        .Select(m => new
                                        {
                                            m.Id,
                                            SenderName = m.Sender.DisplayName ?? m.Sender.UserName,
                                            m.Content,
                                            m.CreatedAt
                                        })
                                        .ToListAsync();
                                    }
                                    @if (messages.Any())
                                    {
                                        foreach (var message in messages)
                                        {
                                            <li>
                                                <a class="dropdown-item message-item" asp-page="/Chat" asp-route-userId="@message.SenderName" data-message-id="@message.Id">
                                                    <small><strong>@message.SenderName</strong>: @message.Content.Substring(0, Math.Min(50, message.Content.Length))@(message.Content.Length > 50 ? "..." : "")</small><br />
                                                    <small class="text-muted">@message.CreatedAt.ToString("dd/MM/yyyy HH:mm")</small>
                                                </a>
                                            </li>
                                        }
                                    }
                                    else
                                    {
                                        <li><span class="dropdown-item text-muted">Không có tin nhắn</span></li>
                                    }
                                    <li><hr class="dropdown-divider" /></li>
                                    <li><a class="dropdown-item text-center" asp-page="/Chat">Xem Tất Cả</a></li>
                                </ul>
                            </li>
                            <!-- User Dropdown -->
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <img src="@(User.FindFirst("AvatarUrl")?.Value ?? "/images/default-avatar.png")" alt="Avatar" class="rounded-circle me-2" style="width: 30px; height: 30px;" />
                                    <span>@User.FindFirst("Username")?.Value</span>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li><a class="dropdown-item" asp-page="/EditProfile">Chỉnh Sửa Hồ Sơ</a></li>
                                    <li><a class="dropdown-item" asp-page="/Logout">Đăng Xuất</a></li>
                                </ul>
                            </li>
                        }
                        else
                        {
                            <li class="nav-item"><a class="nav-link" asp-page="/Login">Đăng Nhập</a></li>
                            <li class="nav-item"><a class="nav-link" asp-page="/Register">Đăng Ký</a></li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <main class="container py-4">
        @RenderBody()
    </main>

    <footer class="bg-light text-center py-3">
        <p>© @DateTime.Now.Year TechShare. Tất cả quyền được bảo lưu.</p>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.validate/1.19.3/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.validate.unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
    <script>
        $(document).ready(function () {

            // SignalR connection for /mesHub
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/mesHub")
                .withAutomaticReconnect()
                .build();

            connection.on("ReceiveMessage", function (message) {
                console.log("New message received:", {
                    id: message.id,
                    senderName: message.senderName,
                    content: message.content ? message.content.substring(0, 10) + "..." : "undefined",
                    createdAt: message.createdAt,
                    receiverId: message.receiverId
                });
                const userId = "@UserManager.GetUserId(User)";
                if (!userId) {
                    console.log("User ID is empty, skipping message update");
                    return;
                }
                if (message.receiverId !== userId) {
                    console.log("Message not for this user, skipping");
                    return;
                }
                if (!message.id || !message.senderName || !message.content || !message.createdAt) {
                    console.log("Invalid message data, skipping");
                    return;
                }
                const $dropdown = $('.messages-dropdown');
                console.log("Dropdown found:", $dropdown.length > 0 ? "Yes" : "No");
                if ($dropdown.length === 0) {
                    console.log("Messages dropdown not found");
                    return;
                }
                const msgItem = `
                    <li>
                        <a class="dropdown-item message-item" href="/Messages/Index?userId=${encodeURIComponent(message.senderName)}" data-message-id="${message.id}">
                            <small><strong>${message.senderName}</strong>: ${message.content.substring(0, 50)}${message.content.length > 50 ? "..." : ""}</small><br />
                            <small class="text-muted">${new Date(message.createdAt).toLocaleString('vi-VN', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' })}</small>
                        </a>
                    </li>`;
                const $items = $dropdown.find('.message-item');
                if ($items.length >= 15) {
                    $items.last().remove();
                }
                $dropdown.prepend(msgItem);
                console.log("Message prepended to dropdown");
                $('#message-badge').show();
                console.log("Badge shown");
            });

            connection.on("ReceiveNotification", function (notificationId, content, createdAt, redirectUrl, type) {
                console.log("New notification received");
                const notificationItem = `
                    <li>
                        <a class="dropdown-item notification-item" href="${redirectUrl}" data-notification-id="${notificationId}">
                            <small>${content}</small><br />
                            <small class="text-muted">${new Date(createdAt).toLocaleString('vi-VN', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' })}</small>
                        </a>
                    </li>`;
                const $dropdown = $('.dropdown-menu').filter(function () {
                    return $(this).find('a[href="/Notifications"]').length > 0;
                });
                const $items = $dropdown.find('.notification-item');
                if ($items.length >= 5) {
                    $items.last().remove();
                }
                $dropdown.prepend(notificationItem);
                updateNotificationCount();
            });

            connection.start().catch(function (err) {
                console.error("SignalR connection error");
            });

            function updateNotificationCount() {
                $.get('/Notifications/GetUnreadCount', function (count) {
                    const badge = $('#notification-count');
                    if (count > 0) {
                        badge.text(count).show();
                    } else {
                        badge.hide();
                    }
                });
            }

            updateNotificationCount();
        });

        @functions {
            private async Task<string> GetOrgSlug(string orgId)
            {
                try
                {
                    if (string.IsNullOrEmpty(orgId)) return "#";
                    var org = await DbContext.Organizations
                        .AsNoTracking()
                        .Where(o => o.Id == orgId)
                        .Select(o => o.Slug)
                        .FirstOrDefaultAsync();
                    return org ?? "#";
                }
                catch
                {
                    return "#";
                }
            }
        }
    </script>
</body>
</html>