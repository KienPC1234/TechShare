@using LoginSystem.Data
@using LoginSystem.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - TechShare</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <style>
        html, body {
            height: 100%;
        }
        body {
            display: flex;
            flex-direction: column;
        }
        main {
            flex: 1 0 auto;
        }
        footer {
            flex-shrink: 0;
            width: 100%;
        }
        .dropdown-menu.notifications-dropdown, .dropdown-menu.messages-dropdown {
            min-width: 350px;
            max-height: 400px;
            overflow-y: auto;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .notification-item, .message-item {
            transition: background-color 0.2s;
            position: relative;
            padding-left: 40px;
        }
        .notification-item.unread {
            background-color: #f8f9fa;
            font-weight: 500;
        }
        .notification-item.unread::before {
            content: '';
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            width: 8px;
            height: 8px;
            background-color: #dc3545;
            border-radius: 50%;
        }
        .notification-item:hover, .message-item:hover {
            background-color: #e9ecef;
        }
        .notification-icon, .message-icon {
            position: absolute;
            left: 10px;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
        }
        .fade-in {
            animation: fadeIn 0.3s ease-in;
        }
        @@keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
    </style>
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-lg navbar-light bg-light shadow-sm">
            <div class="container-fluid">
                <a class="navbar-brand fw-bold" asp-page="/Index">TechShare</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#mainNavbar" aria-controls="mainNavbar" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="mainNavbar">
                    <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                        <li class="nav-item"><a class="nav-link" asp-page="/Index">Trang Chủ</a></li>
                        <li class="nav-item"><a class="nav-link" asp-page="/Exchange/Search">Tìm Kiếm Mặt Hàng</a></li>
                        <li class="nav-item"><a class="nav-link" asp-page="/Organization/Search">Tìm Kiếm Tổ Chức</a></li>
                        @if (User.Identity.IsAuthenticated)
                        {
                            <li class="nav-item"><a class="nav-link" asp-page="/Exchange/CreateItem">Tạo Mặt Hàng</a></li>
                            <li class="nav-item"><a class="nav-link" asp-page="/Exchange/ManageItems">Quản Lý Mặt Hàng</a></li>
                            <li class="nav-item"><a class="nav-link" asp-page="/Chat">Tin Nhắn</a></li>
                            <li class="nav-item"><a class="nav-link" asp-page="/Exchange/UserActivity">Hoạt Động Của Tôi</a></li>
                            if (User.FindFirst("OrganizationId")?.Value != null)
                            {
                                <li class="nav-item"><a class="nav-link" asp-page="/Organization/Details" asp-route-slug="@(await GetOrgSlug(User.FindFirst("OrganizationId")?.Value))">Tổ Chức Của Tôi</a></li>
                            }
                            else if (User.IsInRole("Admin"))
                            {
                                <li class="nav-item"><a class="nav-link" asp-page="/Organization/Create">Tạo Tổ Chức</a></li>
                            }
                            if (User.IsInRole("Delivery"))
                            {
                                <li class="nav-item"><a class="nav-link" asp-page="/Exchange/DeliveryOrders">Đơn Hàng Vận Chuyển</a></li>
                            }
                            if (User.IsInRole("SuperAdmin"))
                            {
                                <li class="nav-item"><a class="nav-link" asp-page="/Dashboard">Dashboard</a></li>
                            }
                        }
                    </ul>
                    <ul class="navbar-nav align-items-center">
                        @if (User.Identity.IsAuthenticated)
                        {
                            <!-- Notifications Dropdown -->
                            <li class="nav-item dropdown me-2">
                                <a class="nav-link position-relative" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-bell"></i>
                                    <span id="notification-count" class="badge bg-danger rounded-pill position-absolute" style="top: 5px; right: -10px; display: none;">0</span>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end notifications-dropdown">
                                    @{
                                        var notifications = await DbContext.Notifications
                                            .Where(n => n.UserId == UserManager.GetUserId(User))
                                            .OrderByDescending(n => n.CreatedAt)
                                            .Take(5)
                                            .ToListAsync();
                                    }
                                    @if (notifications.Any())
                                    {
                                        foreach (var notification in notifications)
                                        {
                                            string redirectUrl = notification.Type switch
                                            {
                                                "ItemComment" => $"/Exchange/Item/{notification.ItemId}",
                                                "ItemRating" => $"/Exchange/Item/{notification.ItemId}",
                                                "ItemReport" => $"/Exchange/Item/{notification.ItemId}",
                                                "Order" => $"/Exchange/OrderDetails/{notification.OrderId}",
                                                "OrganizationJoin" or "OrganizationRoleChange" or "OrganizationComment" or "OrganizationReport" => $"/Organization/Details?slug={await GetOrgSlug(notification.OrganizationId)}",
                                                _ => "#"
                                            };
                                            string iconClass = notification.Type switch
                                            {
                                                "ItemComment" => "fas fa-comment",
                                                "ItemRating" => "fas fa-star",
                                                "ItemReport" => "fas fa-flag",
                                                "Order" => "fas fa-shopping-cart",
                                                "OrganizationJoin" => "fas fa-user-plus",
                                                "OrganizationRoleChange" => "fas fa-user-shield",
                                                "OrganizationComment" => "fas fa-comments",
                                                "OrganizationReport" => "fas fa-exclamation-triangle",
                                                _ => "fas fa-bell"
                                            };
                                            <li>
                                                <a class="dropdown-item notification-item @(notification.IsRead ? "" : "unread")" href="@redirectUrl" data-notification-id="@notification.Id">
                                                    <i class="notification-icon @iconClass"></i>
                                                    <small>@notification.Content</small><br />
                                                    <small class="text-muted">@notification.CreatedAt.ToString("dd/MM/yyyy HH:mm")</small>
                                                </a>
                                            </li>
                                        }
                                    }
                                    else
                                    {
                                        <li><span class="dropdown-item text-muted">Không có thông báo</span></li>
                                    }
                                    <li><hr class="dropdown-divider" /></li>
                                    <li><a class="dropdown-item text-center" asp-page="/Notifications">Xem Tất Cả</a></li>
                                </ul>
                            </li>
                            <!-- Messages Dropdown -->
                            <li class="nav-item dropdown me-2">
                                <a class="nav-link position-relative" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-envelope"></i>
                                    <span id="message-badge" class="badge bg-danger rounded-pill position-absolute" style="top: 5px; right: -10px; display: none;">!</span>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end messages-dropdown">
                                    @{
                                        var messages = await DbContext.Messages
                                            .Where(m => m.ReceiverId == UserManager.GetUserId(User))
                                            .OrderByDescending(m => m.CreatedAt)
                                            .Take(15)
                                            .Select(m => new
                                            {
                                                m.Id,
                                                SenderId = m.SenderId,
                                                SenderName = m.Sender.DisplayName ?? m.Sender.UserName,
                                                m.Content,
                                                m.CreatedAt
                                            })
                                            .ToListAsync();
                                    }
                                    @if (messages.Any())
                                    {
                                        foreach (var message in messages)
                                        {
                                            <li>
                                                <a class="dropdown-item message-item" 
                                                   asp-page="/Chat" asp-route-userId="@message.SenderId" 
                                                   data-message-id="@message.Id">
                                                    <i class="message-icon fas fa-user-circle"></i>
                                                    <small><strong>@message.SenderName</strong>: @message.Content.Substring(0, Math.Min(50, message.Content.Length))@(message.Content.Length > 50 ? "..." : "")</small><br />
                                                    <small class="text-muted">@message.CreatedAt.ToString("dd/MM/yyyy HH:mm")</small>
                                                </a>
                                            </li>
                                        }
                                    }
                                    else
                                    {
                                        <li><span class="dropdown-item text-muted">Không có tin nhắn</span></li>
                                    }
                                    <li><hr class="dropdown-divider" /></li>
                                    <li><a class="dropdown-item text-center" asp-page="/Chat">Xem Tất Cả</a></li>
                                </ul>
                            </li>
                            <!-- User Dropdown -->
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <img src="@(User.FindFirst("AvatarUrl")?.Value ?? "/images/default-avatar.png")" alt="Avatar" class="rounded-circle me-2" style="width: 30px; height: 30px;" />
                                    <span>@User.FindFirst("Username")?.Value</span>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li><a class="dropdown-item" asp-page="/EditProfile">Chỉnh Sửa Hồ Sơ</a></li>
                                    <li><a class="dropdown-item" asp-page="/Logout">Đăng Xuất</a></li>
                                </ul>
                            </li>
                        }
                        else
                        {
                            <li class="nav-item"><a class="nav-link" asp-page="/Login">Đăng Nhập</a></li>
                            <li class="nav-item"><a class="nav-link" asp-page="/Register">Đăng Ký</a></li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <main class="container py-4">
        @RenderBody()
    </main>

    <footer class="bg-light text-center py-3">
        <p>© @DateTime.Now.Year TechShare. Tất cả quyền được bảo lưu.</p>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.validate/1.19.3/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.validate.unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script defer src="https://cdnjs.cloudflare.com/polyfill/v3/polyfill.js?version=4.8.0&features=Map%2CSet%2CElement.prototype.matches%2CNode.prototype.contains%2CPromise%2Cfetch"></script>

    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
    <script>
        $(document).ready(function () {
            let unreadCount = 0;

            // SignalR connection for /NotificationHub
            const notificationConnection = new signalR.HubConnectionBuilder()
                .withUrl("/NotificationHub")
                .withAutomaticReconnect()
                .build();

            notificationConnection.on("ReceiveNotification", function (notificationId, content, createdAt, redirectUrl, type) {
                console.log("New notification:", { notificationId, content: content.substring(0, 10) + "...", createdAt, type });
                const $dropdown = $('.notifications-dropdown');
                if ($dropdown.length === 0) return;
                const iconClass = {
                    "ItemComment": "fas fa-comment",
                    "ItemRating": "fas fa-star",
                    "ItemReport": "fas fa-flag",
                    "Order": "fas fa-shopping-cart",
                    "OrganizationJoin": "fas fa-user-plus",
                    "OrganizationRoleChange": "fas fa-user-shield",
                    "OrganizationComment": "fas fa-comments",
                    "OrganizationReport": "fas fa-exclamation-triangle"
                }[type] || "fas fa-bell";
                const notificationItem = `
                    <li class="fade-in">
                        <a class="dropdown-item notification-item unread" href="${redirectUrl}" data-notification-id="${notificationId}">
                            <i class="notification-icon ${iconClass}"></i>
                            <small>${content}</small><br />
                            <small class="text-muted">${new Date(createdAt).toLocaleString('vi-VN', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' })}</small>
                        </a>
                    </li>`;
                const $items = $dropdown.find('.notification-item');
                if ($items.length >= 5) $items.last().remove();
                $dropdown.prepend(notificationItem);
                unreadCount++;
                updateNotificationBadge();
            });

            notificationConnection.start().catch(function (err) {
                console.error("NotificationHub error:", err.toString());
            });

            // SignalR connection for /mesHub
            const messageConnection = new signalR.HubConnectionBuilder()
                .withUrl("/mesHub")
                .withAutomaticReconnect()
                .build();

            messageConnection.on("ReceiveMessage", function (message) {
                console.log("New message:", {
                    id: message.id,
                    senderId: message.senderId,
                    content: message.content ? message.content.substring(0, 10) + "..." : "[media]",
                    createdAt: message.createdAt
                });
                const userId = "@UserManager.GetUserId(User)";
                if (!userId || message.receiverId !== userId || !message.id || !message.senderId || !message.content || !message.createdAt) return;
                const $dropdown = $('.messages-dropdown');
                if ($dropdown.length === 0) return;
                const msgItem = `
                    <li class="fade-in">
                        <a class="dropdown-item message-item" href="/Chat?userId=${message.senderId}" data-message-id="${message.id}">
                            <i class="message-icon fas fa-user-circle"></i>
                            <small><strong>${message.senderName || 'Unknown'}</strong>: ${message.content.substring(0, 50)}${message.content.length > 50 ? "..." : ""}</small><br />
                            <small class="text-muted">${new Date(message.createdAt).toLocaleString('vi-VN', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' })}</small>
                        </a>
                    </li>`;
                const $items = $dropdown.find('.message-item');
                if ($items.length >= 15) $items.last().remove();
                $dropdown.prepend(msgItem);
                $('#message-badge').show();
            });

            messageConnection.start().catch(function (err) {
                console.error("MessHub error:", err.toString());
            });

            // Mark notification as read
            $(document).on('click', '.notification-item', function (e) {
                e.preventDefault();
                const $item = $(this);
                const notificationId = $item.data('notification-id');
                const redirectUrl = $item.attr('href');
                if ($item.hasClass('unread')) {
                    $.ajax({
                        url: `/api/notifications/mark-read/${notificationId}`,
                        type: 'POST',
                        success: function () {
                            $item.removeClass('unread');
                            unreadCount = Math.max(0, unreadCount - 1);
                            updateNotificationBadge();
                            window.location.href = redirectUrl;
                        },
                        error: function () {
                            window.location.href = redirectUrl;
                        }
                    });
                } else {
                    window.location.href = redirectUrl;
                }
            });

            // Navigate to chat
            $(document).on('click', '.message-item', function (e) {
                e.preventDefault();
                const redirectUrl = $(this).attr('href');
                window.location.href = redirectUrl;
            });

            function updateNotificationBadge() {
                const $badge = $('#notification-count');
                if (unreadCount > 0) {
                    $badge.text(unreadCount).show();
                } else {
                    $badge.hide();
                }
            }

            // Initial notification count
            $.get('/api/notifications/unread-count', function (count) {
                unreadCount = count;
                updateNotificationBadge();
            });

            @functions {
                private async Task<string> GetOrgSlug(string orgId)
                {
                    try
                    {
                        if (string.IsNullOrEmpty(orgId)) return "#";
                        var org = await DbContext.Organizations
                            .AsNoTracking()
                            .Where(o => o.Id == orgId)
                            .Select(o => o.Slug)
                            .FirstOrDefaultAsync();
                        return org ?? "#";
                    }
                    catch
                    {
                        return "#";
                    }
                }
            }
        });
    </script>
</body>
</html>