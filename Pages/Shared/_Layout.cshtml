@using LoginSystem.Data
@using LoginSystem.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext
<!DOCTYPE html>
<html lang="vi">
<head>
    <!-- ========== Cơ bản & SEO ========== -->
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>@(ViewData["Title"] ?? "TechShare") – TechShare</title>

    <meta name="description" content="TechShare – Nền tảng chia sẻ, mượn và tái sử dụng thiết bị CNTT & Robotics cho các trường khu vực Thạch Thất." />
    <meta name="keywords" content="TechShare, chia sẻ thiết bị, tái sử dụng laptop, robot, linh kiện, Thạch Thất, giáo dục" />
    <meta name="author" content="TechShare Team" />
    <link rel="canonical" href="@Context.Request.Scheme://@Context.Request.Host@Context.Request.Path" />
    <meta name="robots" content="index,follow" />

    <!-- OpenGraph / Twitter -->
    <meta property="og:type" content="website" />
    <meta property="og:locale" content="vi_VN" />
    <meta property="og:site_name" content="TechShare" />
    <meta property="og:title" content="@(ViewData["Title"] ?? "TechShare")" />
    <meta property="og:description" content="TechShare – Kết nối, chia sẻ, tái sử dụng thiết bị công nghệ giữa các trường học." />
    <meta property="og:url" content="@Context.Request.Scheme://@Context.Request.Host@Context.Request.Path" />
    <meta property="og:image" content="~/images/techshare-og-image.png" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="@(ViewData["Title"] ?? "TechShare")" />
    <meta name="twitter:description" content="TechShare – Kết nối, chia sẻ, tái sử dụng thiết bị công nghệ giữa các trường học." />
    <meta name="twitter:image" content="~/images/techshare-og-image.png" />

    <link rel="icon" type="image/png" href="~/icon.png" sizes="32x32" />

    <!-- ========== CSS & Assets ========== -->
    <link rel="preconnect" href="https://cdnjs.cloudflare.com" />
    <link rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
          integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA=="
          crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" integrity="sha384-tViUnnbYAV00FLIhhi3v/dWt3Jxw4gZQcNoSCxCIFNJVCx7/D55/wXsrNIRANwdD" crossorigin="anonymous">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />

    <link href="https://cdnjs.cloudflare.com/ajax/libs/aos/3.0.0-beta.6/aos.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <style>
        /* Wrapper for reCAPTCHA widget */
        .recaptcha-wrapper {
            display: inline-flex;
            justify-content: center;
            align-items: center;
            margin: 1.5rem 0;
            padding: 1.25rem;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 12px;
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(8px);
            border: 1px solid rgba(255, 255, 255, 0.15);
            transition: all 0.3s ease;
            font-family: 'Poppins', sans-serif;
        }

            /* Hover effect */
            .recaptcha-wrapper:hover {
                box-shadow: 0 12px 32px rgba(0, 0, 0, 0.15);
                transform: translateY(-4px);
            }

        /* Style g-recaptcha */
        .g-recaptcha {
            display: inline-block;
            transform: scale(1);
            transition: transform 0.3s ease;
        }

        /* Minimal styling for rc-anchor-container */
        #rc-anchor-container {
            border-radius: 6px;
            overflow: hidden;
        }

        /* Subtle gradient overlay */
        .recaptcha-wrapper::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, rgba(59, 130, 246, 0.05), rgba(255, 255, 255, 0.05));
            border-radius: 12px;
            z-index: -1;
            opacity: 0.5;
            transition: opacity 0.3s ease;
        }

        .recaptcha-wrapper:hover::before {
            opacity: 0.8;
        }

        /* Responsive adjustments */
        @@media (max-width: 576px) {
            .g-recaptcha

        {
            transform: scale(0.85);
        }

        .recaptcha-wrapper {
            padding: 0.75rem;
            margin: 1rem 0;
        }

        }

        /* Label styling */
        .recaptcha-label {
            font-family: 'Poppins', sans-serif;
            font-size: 1rem;
            font-weight: 500;
            color: #1f2937;
            text-align: center;
            margin-bottom: 0.75rem;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        }

        /* Ensure iframe inherits rounded corners */
        .g-recaptcha iframe {
            border-radius: 6px;
        }

        
    </style>
    <style>

        /* === Layout basics === */
        html, body {
            height: 100%
        }

        nav {
          zoom:0.9
        }

        body {
            display: flex;
            flex-direction: column
        }

        main {
            flex: 1 0 auto
        }

        footer {
            flex-shrink: 0
        }

        .nav-item{
            margin-top:5px;
        }
        /* === Nav brand & links === */
        .navbar-brand span {
            white-space: nowrap
        }

        .navbar-nav .nav-link {
            padding: .5rem 1rem;
            font-weight: 500;
            transition: color .2s,background-color .2s;
        }

            .navbar-nav .nav-link:hover,
            .navbar-nav .nav-link:focus {
                color: #0d6efd;
                background: rgba(13,110,253,.1);
                border-radius: .375rem;
            }
        @@media (min-width:992px) {
            .navbar-nav .nav-link

        {
            margin-inline: .25rem;
        }

        }

        /* === Dropdown fancy === */
        .dropdown-menu.notifications-dropdown,
        .dropdown-menu.messages-dropdown {
            min-width: 360px;
            max-height: 420px;
            overflow-y: auto;
            border-radius: .75rem;
            box-shadow: 0 8px 24px rgba(0,0,0,.08);
        }

        .notification-item, .message-item {
            position: relative;
            padding-left: 42px;
            transition: background-color .2s;
        }

            .notification-item.unread {
                background: #f5f6f7;
                font-weight: 500
            }

                .notification-item.unread::before {
                    content: '';
                    position: absolute;
                    left: 16px;
                    top: 50%;
                    transform: translateY(-50%);
                    width: 8px;
                    height: 8px;
                    background: #dc3545;
                    border-radius: 50%;
                }

        .notification-icon, .message-icon {
            position: absolute;
            left: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
        }

        .notification-item:hover, .message-item:hover {
            background: #eef0f3
        }

        /* === Simple fade === */
        .fade-in {
            animation: fadeIn .4s ease-in-out forwards
        }
        @@keyframes fadeIn {
            from

        {
            opacity: 0;
            transform: translateY(10px)
        }

        to {
            opacity: 1;
            transform: none
        }

        }
    </style>

    <!-- ========== Structured-data JSON-LD ========== -->
    <script type="application/ld+json">
        {
          "@@context":"https://schema.org",
          "@@type":"Organization",
          "name":"TechShare",
          "url":"https://@Context.Request.Host/",
          "logo":"https://@Context.Request.Host/icon.png",
          "sameAs":[
            "https://facebook.com/techshare",
            "https://github.com/techshare"
          ]
        }
    </script>
</head>
<body data-aos-easing="ease-out-cubic" data-aos-duration="700">
    <header>
        <!-- ========== NAVBAR ========== -->
        <nav class="navbar navbar-expand-lg navbar-light bg-light shadow-sm" data-aos="fade-down">
            <div class="container-fluid">
                <!-- Brand -->
                <a class="navbar-brand d-flex align-items-center gap-2 ps-lg-2" asp-page="/Index">
                    <img src="~/icon.png" alt="TechShare logo" width="36" height="36"
                         class="rounded-2 shadow-sm" loading="lazy" />
                    <span class="fw-bold fs-4">Tech<span class="fst-italic">Share</span></span>
                </a>
                <!-- Toggler -->
                <button class="navbar-toggler border-0" type="button" data-bs-toggle="collapse"
                        data-bs-target="#mainNavbar" aria-controls="mainNavbar"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>

                <div class="collapse navbar-collapse" id="mainNavbar">
                    <!-- ==== Menu trái ==== -->
                    <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                        <li class="nav-item"><a class="nav-link" asp-page="/Exchange/Search">Tìm Kiếm Mặt Hàng</a></li>
                        <li class="nav-item"><a class="nav-link" asp-page="/Organization/Search">Tìm Kiếm Tổ Chức</a></li>
                        @if (User.Identity.IsAuthenticated)
                        {
                            <li class="nav-item"><a class="nav-link" asp-page="/Exchange/CreateItem">Tạo Mặt Hàng</a></li>
                            <li class="nav-item"><a class="nav-link" asp-page="/Exchange/ManageItems">Quản Lý Mặt Hàng</a></li>
                            <li class="nav-item"><a class="nav-link" asp-page="/Chat">Tin Nhắn</a></li>
                            <li class="nav-item"><a class="nav-link" asp-page="/Exchange/UserActivity">Hoạt Động Của Tôi</a></li>
                            @if (User.FindFirst("OrganizationId")?.Value != null)
                            {
                                <li class="nav-item">
                                    <a class="nav-link" asp-page="/Organization/Details"
                                       asp-route-slug="@(await GetOrgSlug(User.FindFirst("OrganizationId")?.Value))">
                                        Tổ Chức Của Tôi
                                    </a>
                                </li>
                            }
                            else if (User.IsInRole("Admin"))
                            {
                                <li class="nav-item"><a class="nav-link" asp-page="/Organization/Create">Tạo Tổ Chức</a></li>
                            }
                            @if (User.IsInRole("Delivery"))
                            {
                                <li class="nav-item"><a class="nav-link" asp-page="/Exchange/DeliveryOrders">Đơn Hàng Vận Chuyển</a></li>
                            }
                            @if (User.IsInRole("SuperAdmin"))
                            {
                                <li class="nav-item"><a class="nav-link" asp-page="/Dashboard">Dashboard</a></li>
                            }
                        }
                    </ul>

                    <!-- ==== Menu phải ==== -->
                    <ul class="navbar-nav align-items-center">
                        @if (User.Identity.IsAuthenticated)
                        {
                            <!-- Notifications -->
                            <li class="nav-item dropdown me-lg-3">
                                <a class="nav-link position-relative" href="#" role="button"
                                   data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fa-regular fa-bell"></i>
                                    <span id="notification-count"
                                          class="badge bg-danger rounded-pill position-absolute translate-middle"
                                      hidden>0</span>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end notifications-dropdown p-0">
                                    @{
                                        var notifications = await DbContext.Notifications
                                        .Where(n => n.UserId == UserManager.GetUserId(User))
                                        .OrderByDescending(n => n.CreatedAt)
                                        .Take(5).ToListAsync();
                                    }
                                    @if (notifications.Any())
                                    {
                                        foreach (var n in notifications)
                                        {
                                            string redirectUrl = n.Type switch
                                            {
                                                "ItemComment" => $"/Exchange/Item/{n.ItemId}",
                                                "ItemRating" => $"/Exchange/Item/{n.ItemId}",
                                                "ItemReport" => $"/Exchange/Item/{n.ItemId}",
                                                "Order" => $"/Exchange/OrderDetails/{n.OrderId}",
                                                "OrganizationJoin" or "OrganizationRoleChange" or "OrganizationComment" or "OrganizationReport"
                                                => $"/Organization/Details?slug={await GetOrgSlug(n.OrganizationId)}",
                                                _ => "#"
                                            };
                                            string iconClass = n.Type switch
                                            {
                                                "ItemComment" => "fa-regular fa-comment-dots",
                                                "ItemRating" => "fa-regular fa-star",
                                                "ItemReport" => "fa-solid fa-flag",
                                                "Order" => "fa-solid fa-cart-shopping",
                                                "OrganizationJoin" => "fa-solid fa-user-plus",
                                                "OrganizationRoleChange" => "fa-solid fa-shield-halved",
                                                "OrganizationComment" => "fa-regular fa-comments",
                                                "OrganizationReport" => "fa-solid fa-triangle-exclamation",
                                                _ => "fa-regular fa-bell"
                                            };
                                            <li>
                                                <a class="dropdown-item notification-item @(n.IsRead ? "" : "unread")"
                                                   href="@redirectUrl" data-notification-id="@n.Id">
                                                    <i class="notification-icon @iconClass"></i>
                                                    <small>@n.Content</small><br />
                                                    <small class="text-muted">@n.CreatedAt:dd/MM/yyyy HH:mm</small>
                                                </a>
                                            </li>
                                        }
                                    }
                                    else
                                    {
                                        <li><span class="dropdown-item text-muted">Không có thông báo</span></li>
                                    }
                                    <li><hr class="dropdown-divider" /></li>
                                    <li><a class="dropdown-item text-center" asp-page="/Notifications">Xem Tất Cả</a></li>
                                </ul>
                            </li>

                            <!-- Messages -->
                            <li class="nav-item dropdown me-lg-3">
                                <a class="nav-link position-relative" href="#" role="button"
                                   data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fa-regular fa-envelope"></i>
                                    <span id="message-badge"
                                          class="badge bg-danger rounded-pill position-absolute translate-middle"
                                          hidden>!</span>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end messages-dropdown p-0">
                                    @{
                                        var messages = await DbContext.Messages
                                        .Where(m => m.ReceiverId == UserManager.GetUserId(User))
                                        .OrderByDescending(m => m.CreatedAt)
                                        .Take(15)
                                        .Select(m => new
                                        {
                                            m.Id,
                                            SenderId = m.SenderId,
                                            SenderName = m.Sender.DisplayName ?? m.Sender.UserName,
                                            m.Content,
                                            m.CreatedAt
                                        }).ToListAsync();
                                    }
                                    @if (messages.Any())
                                    {
                                        foreach (var m in messages)
                                        {
                                            <li>
                                                <a class="dropdown-item message-item"
                                                   asp-page="/Chat" asp-route-userId="@m.SenderId"
                                                   data-message-id="@m.Id">
                                                    <i class="message-icon fa-regular fa-circle-user"></i>
                                                    <small><strong>@m.SenderName</strong>: @m.Content[..Math.Min(50, m.Content.Length)]@(m.Content.Length > 50 ? "…" : "")</small><br />
                                                    <small class="text-muted">@m.CreatedAt:dd/MM/yyyy HH:mm</small>
                                                </a>
                                            </li>
                                        }
                                    }
                                    else
                                    {
                                        <li><span class="dropdown-item text-muted">Không có tin nhắn</span></li>
                                    }
                                    <li><hr class="dropdown-divider" /></li>
                                    <li><a class="dropdown-item text-center" asp-page="/Chat">Xem Tất Cả</a></li>
                                </ul>
                            </li>

                            <!-- User -->
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle d-flex align-items-center" href="#"
                                   role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <img src="@(User.FindFirst("AvatarUrl")?.Value ?? "/images/default-avatar.png")"
                                         alt="Avatar" class="rounded-circle me-2" width="30" height="30"
                                         loading="lazy" />
                                    <span>@User.FindFirst("Username")?.Value</span>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li><a class="dropdown-item" asp-page="/EditProfile">Chỉnh Sửa Hồ Sơ</a></li>
                                    <li><a class="dropdown-item" asp-page="/Logout">Đăng Xuất</a></li>
                                </ul>
                            </li>
                        }
                        else
                        {
                            <li class="nav-item"><a class="nav-link" asp-page="/Login">Đăng Nhập</a></li>
                            <li class="nav-item"><a class="nav-link" asp-page="/Register">Đăng Ký</a></li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <!-- ========== CONTENT ========== -->
    <main class="container py-4" data-aos="fade-up">
        @RenderBody()
    </main>

    <!-- ========== FOOTER ========== -->
    <footer class="bg-light py-3 text-center">
        <small>© @DateTime.Now.Year TechShare. Tất cả quyền được bảo lưu.</small>
    </footer>

    <!-- ========== JS ========== -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/aos/3.0.0-beta.6/aos.js" defer></script>
    <script src="https://www.google.com/recaptcha/api.js" async defer></script>
    <script src="~/js/site.js" asp-append-version="true" defer></script>
    @await RenderSectionAsync("Scripts", required: false)

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            AOS.init();  // On-scroll animation
            let unreadCount = 0;

            /* ===== SignalR: Notifications ===== */
            const notifConn = new signalR.HubConnectionBuilder()
                .withUrl("/NotificationHub").withAutomaticReconnect().build();

            notifConn.on("ReceiveNotification", (id, content, createdAt, redirectUrl, type) => {
                const box = document.querySelector('.notifications-dropdown');
                if (!box) return;

                const icons = {
                    ItemComment:'fa-regular fa-comment-dots',
                    ItemRating:'fa-regular fa-star',
                    ItemReport:'fa-solid fa-flag',
                    Order:'fa-solid fa-cart-shopping',
                    OrganizationJoin:'fa-solid fa-user-plus',
                    OrganizationRoleChange:'fa-solid fa-shield-halved',
                    OrganizationComment:'fa-regular fa-comments',
                    OrganizationReport:'fa-solid fa-triangle-exclamation'
                };
                const iconClass = icons[type] ?? 'fa-regular fa-bell';

                const li = document.createElement('li');
                li.classList.add('fade-in');
                li.innerHTML = `
                    <a class="dropdown-item notification-item unread"
                       href="${redirectUrl}" data-notification-id="${id}">
                        <i class="notification-icon ${iconClass}"></i>
                        <small>${content}</small><br>
                        <small class="text-muted">${new Date(createdAt).toLocaleString('vi-VN')}</small>
                    </a>`;
                box.prepend(li);
                if (box.querySelectorAll('.notification-item').length > 5)
                    box.querySelector('.notification-item:last-child')?.remove();
                unreadCount++; updateBadge();
            });
            notifConn.start().catch(console.error);

            /* ===== SignalR: Messages ===== */
            const mesConn = new signalR.HubConnectionBuilder()
                .withUrl("/mesHub").withAutomaticReconnect().build();

            mesConn.on("ReceiveMessage", msg => {
                const me = "@UserManager.GetUserId(User)";
                if (!me || msg.receiverId !== me) return;
                const box = document.querySelector('.messages-dropdown');
                if (!box) return;

                const li = document.createElement('li');
                li.classList.add('fade-in');
                li.innerHTML = `
                    <a class="dropdown-item message-item"
                       href="/Chat?userId=${msg.senderId}" data-message-id="${msg.id}">
                        <i class="message-icon fa-regular fa-circle-user"></i>
                        <small><strong>${msg.senderName}</strong>: ${msg.content.slice(0,50)}${msg.content.length>50?'…':''}</small><br>
                        <small class="text-muted">${new Date(msg.createdAt).toLocaleString('vi-VN')}</small>
                    </a>`;
                box.prepend(li);
                if (box.querySelectorAll('.message-item').length > 15)
                    box.querySelector('.message-item:last-child')?.remove();
                document.getElementById('message-badge').hidden = false;
            });
            mesConn.start().catch(console.error);

            /* ===== Mark read (Fetch) ===== */
            document.body.addEventListener('click', e => {
                const link = e.target.closest('.notification-item');
                if (!link) return;
                e.preventDefault();
                const id = link.dataset.notificationId;
                const url = link.href;
                if (link.classList.contains('unread')){
                    fetch(`/api/notifications/mark-read/${id}`,{method:'POST'})
                      .finally(()=>{link.classList.remove('unread');unreadCount=Math.max(0,--unreadCount);updateBadge();window.location=url;});
                }else{window.location=url;}
            });

            function updateBadge(){
                const b=document.getElementById('notification-count');
                if(unreadCount>0){b.textContent=unreadCount;b.hidden=false;}else b.hidden=true;
            }
            fetch('/api/notifications/unread-count')
                .then(r=>r.ok?r.json():0)
                .then(c=>{unreadCount=c;updateBadge();})
                .catch(console.error);
        });
    </script>

    @functions {
        /* Helper Razor – giữ nguyên backend */
        private async Task<string> GetOrgSlug(string orgId)
        {
            if (string.IsNullOrWhiteSpace(orgId)) return "#";
            var slug = await DbContext.Organizations.AsNoTracking()
            .Where(o => o.Id == orgId).Select(o => o.Slug).FirstOrDefaultAsync();
            return slug ?? "#";
        }
    }
</body>
</html>
