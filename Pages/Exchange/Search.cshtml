@page
@model LoginSystem.Pages.Exchange.SearchModel
@using Microsoft.AspNetCore.Identity
@using Ganss.Xss
@using HtmlAgilityPack
@using System.Text.RegularExpressions
@inject UserManager<ApplicationUser> UserManager
@inject LoginSystem.Data.ApplicationDbContext DbContext

@{
    var sanitizer = new HtmlSanitizer();
    sanitizer.AllowedTags.Clear();
    sanitizer.AllowedTags.Add("p");
    sanitizer.AllowedTags.Add("b");
    sanitizer.AllowedTags.Add("strong");
    sanitizer.AllowedTags.Add("i");
    sanitizer.AllowedTags.Add("em");
    sanitizer.AllowedTags.Add("u");
    sanitizer.AllowedTags.Add("br");
    sanitizer.AllowedTags.Add("ul");
    sanitizer.AllowedTags.Add("ol");
    sanitizer.AllowedTags.Add("li");
    sanitizer.AllowedTags.Add("a");
    sanitizer.AllowedTags.Add("span");
    sanitizer.AllowedAttributes.Add("href");
    sanitizer.AllowedAttributes.Add("title");
    sanitizer.AllowedAttributes.Add("style");

    string HighlightQuery(string text, string query)
    {
        if (string.IsNullOrEmpty(query) || string.IsNullOrEmpty(text)) return text;
        var queryWords = Regex.Split(query.ToLower(), @"\s+");
        var result = text;
        foreach (var word in queryWords)
        {
            if (!string.IsNullOrEmpty(word))
            {
                result = Regex.Replace(result, $@"(?i)\b{Regex.Escape(word)}\b", "<span class='bg-warning text-dark'>$0</span>");
            }
        }
        return result;
    }

    string GetShortDescription(string html, string query)
    {
        var htmlDoc = new HtmlDocument();
        htmlDoc.LoadHtml(string.IsNullOrEmpty(html) ? "<p></p>" : html);
        var plainText = htmlDoc.DocumentNode.InnerText;
        if (string.IsNullOrEmpty(plainText)) return "<p>Không có mô tả.</p>";

        if (string.IsNullOrEmpty(query))
        {
            return $"<p>{(plainText.Length > 100 ? plainText.Substring(0, 100) + "..." : plainText)}</p>";
        }

        var queryWords = Regex.Split(query.ToLower(), @"\s+");
        var index = -1;
        foreach (var word in queryWords)
        {
            index = plainText.ToLower().IndexOf(word, StringComparison.OrdinalIgnoreCase);
            if (index >= 0) break;
        }

        if (index < 0) index = 0;
        var start = Math.Max(0, index - 50);
        var length = Math.Min(100, plainText.Length - start);
        var shortText = start > 0 ? "..." : "";
        shortText += plainText.Substring(start, length);
        if (start + length < plainText.Length) shortText += "...";
        return $"<p>{HighlightQuery(shortText, query)}</p>";
    }

    string GetOrganizationName(string? organizationId)
    {
        if (string.IsNullOrEmpty(organizationId))
        {
            return "Không Tổ Chức";
        }

        var organization = DbContext.Organizations
            .Where(o => o.Id == organizationId)
            .Select(o => o.Name)
            .FirstOrDefault();

        return organization ?? "Không Tổ Chức";
    }
}

<div class="container my-5">
    <h2 class="mb-4 text-primary">@ViewData["Title"]</h2>

    <form method="get" class="mb-5 card p-4 shadow-sm">
        <div class="row g-3">
            <div class="col-md-4">
                <label for="Query" class="form-label">Từ khóa</label>
                <input type="text" asp-for="Query" class="form-control" id="Query" placeholder="Nhập từ khóa tìm kiếm..." />
            </div>
            <div class="col-md-4">
                <label for="CategoryId" class="form-label">Danh mục</label>
                <select asp-for="CategoryId" asp-items="@Model.Categories" class="form-select" id="CategoryId">
                    <option value="">Tất cả</option>
                </select>
            </div>
            <div class="col-md-4">
                <label for="Tags" class="form-label">Tags</label>
                <input type="text" asp-for="Tags" class="form-control" id="Tags" placeholder="Nhập tags, cách nhau bằng dấu phẩy" />
            </div>
        </div>
        <div class="row g-3 mt-3 align-items-end">
            <div class="col-md-4">
                <label for="SortBy" class="form-label">Sắp xếp theo</label>
                <select asp-for="SortBy" class="form-select" id="SortBy">
                    <option value="relevance">Độ liên quan</option>
                    <option value="rating">Điểm đánh giá</option>
                    <option value="quantity">Số lượng</option>
                </select>
            </div>
            <div class="col-md-8 text-end">
                <button type="submit" class="btn btn-primary btn-lg">
                    <i class="bi bi-search me-2"></i>Tìm kiếm
                </button>
            </div>
        </div>
    </form>

    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @Model.ErrorMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (Model.Results.Any())
    {
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h4 class="mb-0">Kết quả tìm kiếm: @Model.Results.Count mặt hàng</h4>
            <nav aria-label="Page navigation">
                <ul class="pagination mb-0">
                    @if (Model.CurrentPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" asp-page="/Exchange/Search" asp-route-Query="@Model.Query" asp-route-CategoryId="@Model.CategoryId" asp-route-Tags="@Model.Tags" asp-route-SortBy="@Model.SortBy" asp-route-Page="@(Model.CurrentPage - 1)">Trước</a>
                        </li>
                    }
                    <li class="page-item disabled"><span class="page-link">Trang @Model.CurrentPage / @Model.TotalPages</span></li>
                    @if (Model.CurrentPage < Model.TotalPages)
                    {
                        <li class="page-item">
                            <a class="page-link" asp-page="/Exchange/Search" asp-route-Query="@Model.Query" asp-route-CategoryId="@Model.CategoryId" asp-route-Tags="@Model.Tags" asp-route-SortBy="@Model.SortBy" asp-route-Page="@(Model.CurrentPage + 1)">Sau</a>
                        </li>
                    }
                </ul>
            </nav>
        </div>
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var result in Model.Results)
            {
                var sanitizedDescription = sanitizer.Sanitize(result.Item.Description ?? "<p></p>");
                var shortDescription = GetShortDescription(sanitizedDescription, Model.Query);
                var sanitizedTitle = HighlightQuery(result.Item.Title, Model.Query);

                <div class="col">
                    <div class="card h-100 shadow-sm transition hover-shadow">
                        @if (result.Item.MediaItems.Any(m => m.MediaType == LoginSystem.Models.MediaType.Image))
                        {
                            <img src="@result.Item.MediaItems.First(m => m.MediaType == LoginSystem.Models.MediaType.Image).Url" class="card-img-top" alt="@result.Item.Title" style="height: 200px; object-fit: cover;" />
                        }
                        else
                        {
                            <img src="/images/placeholder.jpg" class="card-img-top" alt="No image" style="height: 200px; object-fit: cover;" />
                        }
                        <div class="card-body">
                            <h5 class="card-title">@Html.Raw(sanitizedTitle)</h5>
                            <div class="card-text text-muted mb-3">@Html.Raw(shortDescription)</div>
                            <ul class="list-unstyled">
                                <li><strong>Danh mục:</strong> @(result.Item.Category?.Name ?? "Không có")</li>
                                <li><strong>Số lượng:</strong> @result.Item.QuantityAvailable</li>
                                <li><strong>Điểm đánh giá:</strong> @(result.AvgRating.ToString("F1") ?? "Chưa có")</li>
                                <li><strong>Tổ chức:</strong> @GetOrganizationName(result.Item.OrganizationId)</li>
                            </ul>
                            @if (result.Item.Tags.Any())
                            {
                                <div class="mb-3">
                                    @foreach (var tag in result.Item.Tags)
                                    {
                                        <span class="badge bg-primary me-1">@tag.Tag</span>
                                    }
                                </div>
                            }
                            <a asp-page="/Exchange/Item" asp-route-id="@result.Item.Id" class="btn btn-outline-primary w-100">Xem chi tiết</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-info" role="alert">
            Không tìm thấy mặt hàng nào phù hợp.
        </div>
    }
</div>

@section Scripts {
    <script>
        document.querySelectorAll('.card').forEach(card => {
            card.addEventListener('mouseenter', () => card.classList.add('shadow-lg'));
            card.addEventListener('mouseleave', () => card.classList.remove('shadow-lg'));
        });
    </script>
}