@page
@model LoginSystem.Pages.ForgotPasswordModel
@{
    ViewData["Title"] = "Quên mật khẩu";
    Layout = "_Layout";
}

<style>
    body {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    }

    .forgot-password-section {
        padding: 60px 0;
        width: 100%;
    }

    .forgot-password-container {
        background: #ffffff;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        padding: 40px;
        max-width: 500px;
        margin: 0 auto;
        animation: fadeIn 0.5s ease-out;
    }

    @@keyframes fadeIn {
        from

    {
        opacity: 0;
        transform: translateY(20px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    h1 {
        font-weight: 600;
        color: #2c3e50;
        animation: slideIn 0.5s ease-out;
    }

    @@keyframes slideIn {
        from

    {
        transform: translateX(-20px);
        opacity: 0;
    }

    to {
        transform: translateX(0);
        opacity: 1;
    }

    }

    .form-label {
        font-weight: 500;
        color: #34495e;
    }

    .form-control {
        border: 2px solid #e0e0e0;
        border-radius: 10px;
        padding: 12px;
        padding-right: 40px; /* Space for eye icon in password fields */
        transition: all 0.3s ease;
    }

        .form-control:focus {
            border-color: #3498db;
            box-shadow: 0 0 8px rgba(52, 152, 219, 0.3);
            outline: none;
        }

    .btn-primary {
        background: linear-gradient(45deg, #3498db, #2980b9);
        border: none;
        border-radius: 10px;
        padding: 14px;
        font-weight: 500;
        text-transform: uppercase;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            background: linear-gradient(45deg, #2980b9, #3498db);
        }

        .btn-primary::after {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient( 90deg, transparent, rgba(255, 255, 255, 0.2), transparent );
            transition: 0.5s;
        }

        .btn-primary:hover::after {
            left: 100%;
        }

    .btn-outline-secondary {
        border-color: #e0e0e0;
        color: #34495e;
        border-radius: 10px;
        padding: 14px;
        transition: all 0.3s ease;
    }

        .btn-outline-secondary:hover {
            background: #f0f0f0;
            transform: translateY(-2px);
        }

    .alert {
        border-radius: 10px;
        font-size: 14px;
        position: relative;
    }

    .alert-success {
        background: #e6ffed;
        color: #2ecc71;
    }

    .alert-danger {
        background: #ffebee;
        color: #c0392b;
        animation: shake 0.5s;
    }

    .alert .btn-close {
        position: absolute;
        top: 10px;
        right: 10px;
    }

    @@keyframes shake {
        0%, 100%

    {
        transform: translateX(0);
    }

    25%, 75% {
        transform: translateX(-5px);
    }

    50% {
        transform: translateX(5px);
    }

    }

    .text-danger {
        font-size: 13px;
        margin-top: 5px;
        display: block;
    }

    .captcha-container {
        display: flex;
        justify-content: center;
        margin: 20px 0;
    }

    .password-container {
        position: relative;
    }

    .password-toggle {
        position: absolute;
        right: 12px;
        top: 70%;
        transform: translateY(-50%);
        cursor: pointer;
        color: #666;
        font-size: 16px;
        padding: 8px;
        border-radius: 50%;
        transition: all 0.3s ease;
        background: #f0f0f0;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .password-toggle:hover {
            color: #3498db;
            background: #e0e0e0;
        }

    .code-input {
        text-align: center;
        letter-spacing: 3px;
        font-size: 18px;
    }

    .form-text {
        color: #666;
        font-size: 14px;
    }

    .button-group {
        display: flex;
        gap: 10px;
        justify-content: center;
    }

    @@media (max-width: 576px) {
        .forgot-password-container

    {
        padding: 20px;
    }

    h1 {
        font-size: 24px;
    }

    .button-group {
        flex-direction: column;
    }

        .button-group .btn {
            width: 100%;
        }

    }
</style>

<section class="forgot-password-section">
    <div class="forgot-password-container">
        <h1 class="mb-5 text-center">Quên mật khẩu</h1>

        <!-- Notifications -->
        <div id="notificationArea"></div>
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @TempData["SuccessMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @TempData["ErrorMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <!-- Render Partial Views -->
        @if (Model.ShowCodeInput)
        {
            <partial name="_ForgotPasswordCode" model="Model.CodeInput" />
        }
        else if (Model.ShowPasswordInput)
        {
            <partial name="_ForgotPasswordReset" model="Model.PasswordInput" />
        }
        else
        {
            <partial name="_ForgotPasswordEmail" model="Model.EmailInput" />
        }
    </div>
</section>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <script>
        // Utility: Show notification
        function showNotification(message, type) {
            const notificationArea = document.getElementById('notificationArea');
            const alert = document.createElement('div');
            alert.className = `alert alert-${type} alert-dismissible fade show`;
            alert.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            notificationArea.appendChild(alert);
            setTimeout(() => alert.remove(), 5000);
        }

        // Utility: Reset button state
        function resetButtonState(button) {
            if (button) {
                const spinner = button.querySelector('.spinner-border');
                if (spinner) spinner.classList.add('d-none');
                button.disabled = false;
            }
        }

        // Map API error keys to DOM element IDs
        const errorKeyMap = {
            'email': 'emailError',
            'code': 'codeError',
            'newpassword': 'newPasswordError',
            'confirmpassword': 'confirmPasswordError'
        };

        // Initialize form handlers
        function initializeFormHandlers() {
            let currentEmail = localStorage.getItem('forgotPasswordEmail') || '';
            let currentCode = localStorage.getItem('forgotPasswordCode') || '';

            // Password toggle functionality
            document.querySelectorAll('.password-toggle').forEach(toggle => {
                toggle.addEventListener('click', function () {
                    const targetId = this.getAttribute('data-target');
                    const input = document.getElementById(targetId);
                    const icon = this.querySelector('i');
                    if (input.type === 'password') {
                        input.type = 'text';
                        icon.classList.remove('fa-eye-slash');
                        icon.classList.add('fa-eye');
                    } else {
                        input.type = 'password';
                        icon.classList.remove('fa-eye');
                        icon.classList.add('fa-eye-slash');
                    }
                });
            });

            // Form: Email
            const emailForm = document.getElementById('forgotPasswordEmailForm');
            const emailButton = document.getElementById('sendCodeButton');
            if (emailForm && emailButton) {
                emailForm.addEventListener('submit', async function (event) {
                    event.preventDefault();
                    if (!emailForm.checkValidity()) {
                        emailForm.classList.add('was-validated');
                        resetButtonState(emailButton);
                        return;
                    }

                    emailButton.querySelector('.spinner-border').classList.remove('d-none');
                    emailButton.disabled = true;
                    const recaptchaToken = document.querySelector('textarea[name="g-recaptcha-response"]').value;
                    const email = emailForm.querySelector('#email').value;
                    try {
                        const response = await fetch('/api/forgotpassword/send-code', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify({ email,recaptchaToken: recaptchaToken })
                        });
                        const data = await response.json();
                        if (response.ok && data.success) {
                            showNotification(data.message, 'success');
                            localStorage.setItem('forgotPasswordEmail', email);
                            window.location.href = '/ForgotPassword?showCode=true';
                        } else {
                            document.getElementById('emailError').textContent = data.message || 'Không thể gửi mã xác minh.';
                            showNotification(data.message || 'Không thể gửi mã xác minh.', 'danger');
                            if (data.errors) {
                                Object.keys(data.errors).forEach(key => {
                                    const elementId = errorKeyMap[key.toLowerCase()];
                                    if (elementId) {
                                        const element = document.getElementById(elementId);
                                        if (element) {
                                            element.textContent = data.errors[key].join(', ');
                                        }
                                    }
                                });
                            }
                        }
                    } catch (error) {
                        console.error('Fetch Error:', error);
                        document.getElementById('emailError').textContent = 'Lỗi khi gửi yêu cầu.';
                        showNotification('Lỗi khi gửi yêu cầu: ' + error.message, 'danger');
                    } finally {
                        resetButtonState(emailButton);
                    }
                });
            }

            // Form: Code
            const codeForm = document.getElementById('forgotPasswordCodeForm');
            const codeButton = document.getElementById('verifyCodeButton');
            if (codeForm && codeButton) {
                codeForm.addEventListener('submit', async function (event) {
                    event.preventDefault();
                    if (!codeForm.checkValidity()) {
                        codeForm.classList.add('was-validated');
                        resetButtonState(codeButton);
                        return;
                    }

                    if (!currentEmail) {
                        showNotification('Email không hợp lệ. Vui lòng quay lại bước nhập email.', 'danger');
                        window.location.href = '/ForgotPassword';
                        return;
                    }

                    codeButton.querySelector('.spinner-border').classList.remove('d-none');
                    codeButton.disabled = true;

                    const code = codeForm.querySelector('#code').value;
                    try {
                        const response = await fetch('/api/forgotpassword/verify-code', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify({ email: currentEmail, code })
                        });
                        const data = await response.json();
                        if (response.ok && data.success) {
                            showNotification(data.message, 'success');
                            localStorage.setItem('forgotPasswordCode', code);
                            window.location.href = '/ForgotPassword?showPassword=true';
                        } else {
                            document.getElementById('codeError').textContent = data.message || 'Mã xác minh không hợp lệ.';
                            showNotification(data.message || 'Mã xác minh không hợp lệ.', 'danger');
                            if (data.errors) {
                                Object.keys(data.errors).forEach(key => {
                                    const elementId = errorKeyMap[key.toLowerCase()];
                                    if (elementId) {
                                        const element = document.getElementById(elementId);
                                        if (element) {
                                            element.textContent = data.errors[key].join(', ');
                                        }
                                    }
                                });
                            }
                        }
                    } catch (error) {
                        console.error('Fetch Error:', error);
                        document.getElementById('codeError').textContent = 'Lỗi khi xác minh mã.';
                        showNotification('Lỗi khi xác minh mã: ' + error.message, 'danger');
                    } finally {
                        resetButtonState(codeButton);
                    }
                });
            }

            // Form: Reset Password
            const passwordForm = document.getElementById('forgotPasswordResetForm');
            const passwordButton = document.getElementById('resetPasswordButton');
            if (passwordForm && passwordButton) {
                passwordForm.addEventListener('submit', async function (event) {
                    event.preventDefault();
                    if (!passwordForm.checkValidity()) {
                        passwordForm.classList.add('was-validated');
                        resetButtonState(passwordButton);
                        return;
                    }

                    if (!currentEmail || !currentCode) {
                        showNotification('Dữ liệu không hợp lệ. Vui lòng quay lại bước nhập email.', 'danger');
                        window.location.href = '/ForgotPassword';
                        return;
                    }

                    const newPassword = document.getElementById('newPassword').value;
                    const confirmPassword = document.getElementById('confirmPassword').value;
                    if (newPassword !== confirmPassword) {
                        document.getElementById('confirmPasswordError').textContent = 'Mật khẩu xác nhận không khớp.';
                        resetButtonState(passwordButton);
                        return;
                    }

                    passwordButton.querySelector('.spinner-border').classList.remove('d-none');
                    passwordButton.disabled = true;

                    try {
                        const response = await fetch('/api/forgotpassword/reset-password', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify({
                                email: currentEmail,
                                code: currentCode,
                                newPassword,
                                confirmPassword
                            })
                        });
                        const data = await response.json();
                        if (response.ok && data.success) {
                            showNotification(data.message, 'success');
                            localStorage.removeItem('forgotPasswordEmail');
                            localStorage.removeItem('forgotPasswordCode');
                            setTimeout(() => window.location.href = '/Login', 2000);
                        } else {
                            document.getElementById('newPasswordError').textContent = data.message || 'Không thể đặt lại mật khẩu.';
                            showNotification(data.message || 'Không thể đặt lại mật khẩu.', 'danger');
                            if (data.errors) {
                                Object.keys(data.errors).forEach(key => {
                                    const elementId = errorKeyMap[key.toLowerCase()];
                                    if (elementId) {
                                        const element = document.getElementById(elementId);
                                        if (element) {
                                            element.textContent = data.errors[key].join(', ');
                                        }
                                    }
                                });
                            }
                        }
                    } catch (error) {
                        console.error('Fetch Error:', error);
                        document.getElementById('newPasswordError').textContent = 'Lỗi khi đặt lại mật khẩu.';
                        showNotification('Lỗi khi đặt lại mật khẩu: ' + error.message, 'danger');
                    } finally {
                        resetButtonState(passwordButton);
                    }
                });
            }
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            initializeFormHandlers();
        });
    </script>
}