@page
@model LoginSystem.Pages.ForgotPasswordModel
@{
    ViewData["Title"] = "Quên mật khẩu";
    Layout = "_Layout";
}

<section class="forgot-password-section py-5 bg-light">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-6">
                <h1 class="mb-5 text-center fw-bold">Quên mật khẩu</h1>

                <!-- Notifications -->
                <div id="notificationArea"></div>
                @if (TempData["SuccessMessage"] != null)
                {
                    <div class="alert alert-success alert-dismissible fade show animate__animated animate__fadeIn" role="alert">
                        @TempData["SuccessMessage"]
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }
                @if (TempData["ErrorMessage"] != null)
                {
                    <div class="alert alert-danger alert-dismissible fade show animate__animated animate__fadeIn" role="alert">
                        @TempData["ErrorMessage"]
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }

                <!-- Render Partial Views -->
                @if (Model.ShowCodeInput)
                {
                    <partial name="_ForgotPasswordCode" model="Model.CodeInput" />
                }
                else if (Model.ShowPasswordInput)
                {
                    <partial name="_ForgotPasswordReset" model="Model.PasswordInput" />
                }
                else
                {
                    <partial name="_ForgotPasswordEmail" model="Model.EmailInput" />
                }
            </div>
        </div>
    </div>
</section>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <style>
        .bg-gradient-primary {
            background: linear-gradient(45deg, #007bff, #00b7eb);
        }

        .transition-all {
            transition: all 0.3s ease;
        }

        .btn:hover.transition-all {
            transform: translateY(-2px);
        }

        .card {
            border-radius: 15px;
        }

        .form-control-lg {
            border-radius: 10px;
        }
    </style>
    <script>
        // Utility: Show notification
        function showNotification(message, type) {
            const notificationArea = document.getElementById('notificationArea');
            const alert = document.createElement('div');
            alert.className = `alert alert-${type} alert-dismissible fade show animate__animated animate__fadeIn`;
            alert.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            notificationArea.appendChild(alert);
            setTimeout(() => alert.remove(), 5000);
        }

        // Utility: Reset button state
        function resetButtonState(button) {
            if (button) {
                const spinner = button.querySelector('.spinner-border');
                if (spinner) spinner.classList.add('d-none');
                button.disabled = false;
            }
        }

        // Map API error keys to DOM element IDs
        const errorKeyMap = {
            'email': 'emailError',
            'code': 'codeError',
            'newpassword': 'newPasswordError',
            'confirmpassword': 'confirmPasswordError'
        };

        // Initialize form handlers
        function initializeFormHandlers() {
            let currentEmail = localStorage.getItem('forgotPasswordEmail') || '';
            let currentCode = localStorage.getItem('forgotPasswordCode') || '';

            // Form: Email
            const emailForm = document.getElementById('forgotPasswordEmailForm');
            const emailButton = document.getElementById('sendCodeButton');
            if (emailForm && emailButton) {
                emailForm.addEventListener('submit', async function (event) {
                    event.preventDefault();
                    if (!emailForm.checkValidity()) {
                        emailForm.classList.add('was-validated');
                        resetButtonState(emailButton);
                        return;
                    }

                    emailButton.querySelector('.spinner-border').classList.remove('d-none');
                    emailButton.disabled = true;

                    const email = emailForm.querySelector('#email').value;
                    try {
                        const response = await fetch('/api/forgotpassword/send-code', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ email })
                        });
                        const data = await response.json();
                        if (response.ok && data.success) {
                            showNotification(data.message, 'success');
                            localStorage.setItem('forgotPasswordEmail', email);
                            window.location.href = '/ForgotPassword?showCode=true';
                        } else {
                            document.getElementById('emailError').textContent = data.message || 'Không thể gửi mã xác minh.';
                            showNotification(data.message || 'Không thể gửi mã xác minh.', 'danger');
                            if (data.errors) {
                                console.log('Errors:', data.errors); // Debug
                                Object.keys(data.errors).forEach(key => {
                                    const elementId = errorKeyMap[key.toLowerCase()];
                                    if (elementId) {
                                        const element = document.getElementById(elementId);
                                        if (element) {
                                            element.textContent = data.errors[key].join(', ');
                                        }
                                    }
                                });
                            }
                        }
                    } catch (error) {
                        console.error('Fetch Error:', error);
                        document.getElementById('emailError').textContent = 'Lỗi khi gửi yêu cầu.';
                        showNotification('Lỗi khi gửi yêu cầu: ' + error.message, 'danger');
                    } finally {
                        resetButtonState(emailButton);
                    }
                });
            }

            // Form: Code
            const codeForm = document.getElementById('forgotPasswordCodeForm');
            const codeButton = document.getElementById('verifyCodeButton');
            if (codeForm && codeButton) {
                codeForm.addEventListener('submit', async function (event) {
                    event.preventDefault();
                    if (!codeForm.checkValidity()) {
                        codeForm.classList.add('was-validated');
                        resetButtonState(codeButton);
                        return;
                    }

                    if (!currentEmail) {
                        showNotification('Email không hợp lệ. Vui lòng quay lại bước nhập email.', 'danger');
                        window.location.href = '/ForgotPassword';
                        return;
                    }

                    codeButton.querySelector('.spinner-border').classList.remove('d-none');
                    codeButton.disabled = true;

                    const code = codeForm.querySelector('#code').value;
                    try {
                        const response = await fetch('/api/forgotpassword/verify-code', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ email: currentEmail, code })
                        });
                        const data = await response.json();
                        if (response.ok && data.success) {
                            showNotification(data.message, 'success');
                            localStorage.setItem('forgotPasswordCode', code);
                            window.location.href = '/ForgotPassword?showPassword=true';
                        } else {
                            document.getElementById('codeError').textContent = data.message || 'Mã xác minh không hợp lệ.';
                            showNotification(data.message || 'Mã xác minh không hợp lệ.', 'danger');
                            if (data.errors) {
                                console.log('Errors:', data.errors); // Debug
                                Object.keys(data.errors).forEach(key => {
                                    const elementId = errorKeyMap[key.toLowerCase()];
                                    if (elementId) {
                                        const element = document.getElementById(elementId);
                                        if (element) {
                                            element.textContent = data.errors[key].join(', ');
                                        }
                                    }
                                });
                            }
                        }
                    } catch (error) {
                        console.error('Fetch Error:', error);
                        document.getElementById('codeError').textContent = 'Lỗi khi xác minh mã.';
                        showNotification('Lỗi khi xác minh mã: ' + error.message, 'danger');
                    } finally {
                        resetButtonState(codeButton);
                    }
                });
            }

            // Form: Reset Password
            const passwordForm = document.getElementById('forgotPasswordResetForm');
            const passwordButton = document.getElementById('resetPasswordButton');
            if (passwordForm && passwordButton) {
                passwordForm.addEventListener('submit', async function (event) {
                    event.preventDefault();
                    if (!passwordForm.checkValidity()) {
                        passwordForm.classList.add('was-validated');
                        resetButtonState(passwordButton);
                        return;
                    }

                    if (!currentEmail || !currentCode) {
                        showNotification('Dữ liệu không hợp lệ. Vui lòng quay lại bước nhập email.', 'danger');
                        window.location.href = '/ForgotPassword';
                        return;
                    }

                    const newPassword = document.getElementById('newPassword').value;
                    const confirmPassword = document.getElementById('confirmPassword').value;
                    if (newPassword !== confirmPassword) {
                        document.getElementById('confirmPasswordError').textContent = 'Mật khẩu xác nhận không khớp.';
                        resetButtonState(passwordButton);
                        return;
                    }

                    passwordButton.querySelector('.spinner-border').classList.remove('d-none');
                    passwordButton.disabled = true;

                    try {
                        const response = await fetch('/api/forgotpassword/reset-password', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                email: currentEmail,
                                code: currentCode,
                                newPassword,
                                confirmPassword
                            })
                        });
                        const data = await response.json();
                        if (response.ok && data.success) {
                            showNotification(data.message, 'success');
                            localStorage.removeItem('forgotPasswordEmail');
                            localStorage.removeItem('forgotPasswordCode');
                            setTimeout(() => window.location.href = '/Login', 2000);
                        } else {
                            document.getElementById('newPasswordError').textContent = data.message || 'Không thể đặt lại mật khẩu.';
                            showNotification(data.message || 'Không thể đặt lại mật khẩu.', 'danger');
                            if (data.errors) {
                                console.log('Errors:', data.errors); // Debug
                                Object.keys(data.errors).forEach(key => {
                                    const elementId = errorKeyMap[key.toLowerCase()];
                                    if (elementId) {
                                        const element = document.getElementById(elementId);
                                        if (element) {
                                            element.textContent = data.errors[key].join(', ');
                                        }
                                    }
                                });
                            }
                        }
                    } catch (error) {
                        console.error('Fetch Error:', error);
                        document.getElementById('newPasswordError').textContent = 'Lỗi khi đặt lại mật khẩu.';
                        showNotification('Lỗi khi đặt lại mật khẩu: ' + error.message, 'danger');
                    } finally {
                        resetButtonState(passwordButton);
                    }
                });
            }
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            initializeFormHandlers();
        });
    </script>
}