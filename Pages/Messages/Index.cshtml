@page "/Messages/Index"
@model LoginSystem.Pages.Messages.IndexModel
@using Microsoft.AspNetCore.Identity
@using LoginSystem.Models
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager

<div class="container mt-4">
    <h1 class="mb-4">Tin Nhắn</h1>

    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger">@Model.ErrorMessage</div>
    }

    <div class="row">
        <!-- User List -->
        <div class="col-md-4">
            <h5>Danh sách người dùng</h5>
            <ul class="list-group">
                @foreach (var user in Model.Users)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <a asp-page="/Messages/Index" asp-route-userId="@user.Id" class="@(user.Id == Model.SelectedUserId ? "fw-bold" : "")">
                            @user.DisplayName
                        </a>
                        @{
                            var unreadCount = await Model.DbContext.Messages
                            .Where(m => m.SenderId == user.Id && m.ReceiverId == UserManager.GetUserId(User) && !m.IsRead)
                            .CountAsync();
                        }
                        @if (unreadCount > 0)
                        {
                            <span class="badge bg-primary rounded-pill">@unreadCount</span>
                        }
                    </li>
                }
            </ul>
        </div>

        <!-- Chat Area -->
        <div class="col-md-8">
            @if (!string.IsNullOrEmpty(Model.SelectedUserId))
            {
                <h5>Trò chuyện với @Model.SelectedUser?.DisplayName</h5>
                <div class="card">
                    <div class="card-body" id="chatMessages" style="max-height: 400px; overflow-y: auto;">
                        @foreach (var message in Model.Messages)
                        {
                            <div class="mb-2 @(message.SenderId == UserManager.GetUserId(User) ? "text-end" : "")">
                                <p class="d-inline-block p-2 rounded @(message.SenderId == UserManager.GetUserId(User) ? "bg-primary text-white" : "bg-light")">
                                    @message.Content
                                </p>
                                <br />
                                <small class="text-muted">@message.CreatedAt.ToString("dd/MM/yyyy HH:mm")</small>
                            </div>
                        }
                    </div>
                    <div class="card-footer">
                        <form method="post" asp-page-handler="Send" class="needs-validation" novalidate>
                            <div class="input-group">
                                <input type="hidden" name="receiverId" value="@Model.SelectedUserId" />
                                <input type="text" class="form-control" name="content" maxlength="1000" placeholder="Nhập tin nhắn..." required />
                                <button type="submit" class="btn btn-primary">Gửi</button>
                            </div>
                            <div class="invalid-feedback">Vui lòng nhập nội dung tin nhắn.</div>
                        </form>
                    </div>
                </div>
            }
            else
            {
                <p class="text-muted">Chọn một người dùng để bắt đầu trò chuyện.</p>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <partial name="_ValidationScriptsPartial" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script>
        $(document).ready(function () {
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub")
                .withAutomaticReconnect()
                .build();

            connection.on("ReceiveMessage", function (senderName, message, createdAt) {
                const userId = "@UserManager.GetUserId(User)";
                const selectedUserId = "@Model.SelectedUserId";
                if (userId && selectedUserId && senderName === selectedUserId) {
                    const msgHtml = `<div class="mb-2"><p class="d-inline-block p-2 rounded bg-light">${message}</p><br /><small class="text-muted">${createdAt}</small></div>`;
                    $("#chatMessages").append(msgHtml);
                    $("#chatMessages").scrollTop($("#chatMessages")[0].scrollHeight);
                }
            });

            connection.start().catch(function (err) {
                console.error("SignalR Connection Error: ", err.toString());
            });

            // Form validation
            const forms = document.querySelectorAll('.needs-validation');
            Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        });
    </script>
}