@page
@model LoginSystem.Pages.NotificationsModel
@{
    ViewData["Title"] = "Thông Báo";
}
<div class="row">
    <div class="col-12">
        <h1 class="mb-4">Thông Báo</h1>
        <div class="d-flex justify-content-end mb-3 gap-2">
            <button id="mark-all-read" class="btn btn-primary" @(Model.Notifications.Any(n => !n.IsRead) ? "" : "disabled")>Đánh Dấu Tất Cả Đã Đọc</button>
            <button id="delete-all-notifications" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteAllModal" @(Model.Notifications.Any() ? "" : "disabled")>Xóa Tất Cả</button>
        </div>
        <div id="notifications-list">
            @if (Model.Notifications.Any())
            {
                foreach (var notification in Model.Notifications)
                {
                    string redirectUrl = notification.Type switch
                    {
                        "ItemComment" => $"/Exchange/Item/{notification.ItemId}",
                        "ItemRating" => $"/Exchange/Item/{notification.ItemId}",
                        "ItemReport" => $"/Exchange/Item/{notification.ItemId}",
                        "Order" => $"/Exchange/OrderDetails/{notification.OrderId}",
                        "OrganizationJoin" or "OrganizationRoleChange" or "OrganizationComment" or "OrganizationReport" => $"/Organization/Details?slug={await Model.GetOrganizationSlugAsync(notification.OrganizationId)}",
                        _ => "#"
                    };
                    string iconClass = notification.Type switch
                    {
                        "ItemComment" => "fas fa-comment",
                        "ItemRating" => "fas fa-star",
                        "ItemReport" => "fas fa-flag",
                        "Order" => "fas fa-shopping-cart",
                        "OrganizationJoin" => "fas fa-user-plus",
                        "OrganizationRoleChange" => "fas fa-user-shield",
                        "OrganizationComment" => "fas fa-comments",
                        "OrganizationReport" => "fas fa-exclamation-triangle",
                        _ => "fas fa-bell"
                    };
                    <div class="card mb-2 notification-card @(notification.IsRead ? "" : "unread")" data-notification-id="@notification.Id">
                        <div class="card-body d-flex align-items-center">
                            <i class="@iconClass me-3 text-muted" style="font-size: 1.2rem;"></i>
                            <div class="flex-grow-1">
                                <p class="mb-1">@notification.Content</p>
                                <small class="text-muted">@notification.CreatedAt.ToString("dd/MM/yyyy HH:mm")</small>
                            </div>
                            <a href="@redirectUrl" class="notification-item btn btn-link text-decoration-none me-2">Xem</a>
                            <button class="btn btn-link text-danger delete-notification" data-notification-id="@notification.Id"><i class="fas fa-trash"></i></button>
                        </div>
                    </div>
                }
                <nav aria-label="Page navigation" class="mt-4">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                            <a class="page-link" asp-page="/Notifications" asp-route-page="@(Model.CurrentPage - 1)">Trước</a>
                        </li>
                        @for (int i = 1; i <= Model.TotalPages; i++)
                        {
                            <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                                <a class="page-link" asp-page="/Notifications" asp-route-page="@i">@i</a>
                            </li>
                        }
                        <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                            <a class="page-link" asp-page="/Notifications" asp-route-page="@(Model.CurrentPage + 1)">Sau</a>
                        </li>
                    </ul>
                </nav>
            }
            else
            {
                <p class="text-muted">Không có thông báo nào.</p>
            }
        </div>
    </div>
</div>

<!-- Delete All Confirmation Modal -->
<div class="modal fade" id="deleteAllModal" tabindex="-1" aria-labelledby="deleteAllModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteAllModalLabel">Xác Nhận Xóa Tất Cả Thông Báo</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Bạn có chắc chắn muốn xóa tất cả thông báo? Hành động này không thể hoàn tác.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-danger" id="confirm-delete-all">Xóa Tất Cả</button>
            </div>
        </div>
    </div>
</div>

<style>
    .notification-card {
        transition: background-color 0.2s;
        border-radius: 8px;
    }

        .notification-card.unread {
            background-color: #f8f9fa;
            font-weight: 500;
            position: relative;
        }

            .notification-card.unread::before {
                content: '';
                position: absolute;
                left: 10px;
                top: 50%;
                transform: translateY(-50%);
                width: 8px;
                height: 8px;
                background-color: #dc3545;
                border-radius: 50%;
            }

        .notification-card:hover {
            background-color: #e9ecef;
        }

    .fade-in {
        animation: fadeIn 0.3s ease-in;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }
</style>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script>
        $(document).ready(function () {
            let unreadCount = 0;

            // SignalR connection
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/NotificationHub")
                .withAutomaticReconnect()
                .build();

            connection.on("ReceiveNotification", function (notificationId, content, createdAt, redirectUrl, type) {
                console.log("New notification received:", { notificationId, content: content.substring(0, 10) + "...", createdAt, type });
                const iconClass = {
                    "ItemComment": "fas fa-comment",
                    "ItemRating": "fas fa-star",
                    "ItemReport": "fas fa-flag",
                    "Order": "fas fa-shopping-cart",
                    "OrganizationJoin": "fas fa-user-plus",
                    "OrganizationRoleChange": "fas fa-user-shield",
                    "OrganizationComment": "fas fa-comments",
                    "OrganizationReport": "fas fa-exclamation-triangle"
                }[type] || "fas fa-bell";
                const notificationHtml = `
                    <div class="card mb-2 notification-card unread fade-in" data-notification-id="${notificationId}">
                        <div class="card-body d-flex align-items-center">
                            <i class="${iconClass} me-3 text-muted" style="font-size: 1.2rem;"></i>
                            <div class="flex-grow-1">
                                <p class="mb-1">${content}</p>
                                <small class="text-muted">${new Date(createdAt).toLocaleString('vi-VN', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' })}</small>
                            </div>
                            <a href="${redirectUrl}" class="notification-item btn btn-link text-decoration-none me-2">Xem</a>
                            <button class="btn btn-link text-danger delete-notification" data-notification-id="${notificationId}"><i class="fas fa-trash"></i></button>
                        </div>
                    </div>`;
                $("#notifications-list").prepend(notificationHtml);
                $("#delete-all-notifications").removeAttr("disabled");
                $("#mark-all-read").removeAttr("disabled");
                unreadCount++;
                updateNotificationBadge();
            });

            connection.start().catch(function (err) {
                console.error("NotificationHub connection failed:", err.toString());
            });

            // Mark notification as read
            $(document).on('click', '.notification-item', function (e) {
                e.preventDefault();
                const $item = $(this);
                const notificationId = $item.data('notification-id') || $item.closest('.notification-card').data('notification-id');
                const redirectUrl = $item.attr('href');
                const $card = $item.closest('.notification-card');
                if ($card.hasClass('unread')) {
                    $.ajax({
                        url: `/api/notifications/mark-read/${notificationId}`,
                        type: 'POST',
                        success: function () {
                            $card.removeClass('unread');
                            unreadCount = Math.max(0, unreadCount - 1);
                            updateNotificationBadge();
                            window.location.href = redirectUrl;
                        },
                        error: function () {
                            window.location.href = redirectUrl;
                        }
                    });
                } else {
                    window.location.href = redirectUrl;
                }
            });

            // Delete single notification
            $(document).on('click', '.delete-notification', function () {
                const notificationId = $(this).data('notification-id');
                const $card = $(this).closest('.notification-card');
                $.ajax({
                    url: `/api/notifications/${notificationId}`,
                    type: 'DELETE',
                    success: function () {
                        $card.remove();
                        if ($card.hasClass('unread')) {
                            unreadCount = Math.max(0, unreadCount - 1);
                            updateNotificationBadge();
                        }
                        if ($('#notifications-list').children('.notification-card').length === 0) {
                            $('#notifications-list').html('<p class="text-muted">Không có thông báo nào.</p>');
                            $("#delete-all-notifications").attr("disabled", "disabled");
                            $("#mark-all-read").attr("disabled", "disabled");
                        }
                    },
                    error: function () {
                        alert("Lỗi khi xóa thông báo");
                    }
                });
            });

            // Mark all notifications as read
            $("#mark-all-read").click(function () {
                $.ajax({
                    url: '/api/notifications/mark-all-read',
                    type: 'POST',
                    success: function () {
                        $('.notification-card.unread').removeClass('unread');
                        unreadCount = 0;
                        updateNotificationBadge();
                        $("#mark-all-read").attr("disabled", "disabled");
                    },
                    error: function () {
                        alert("Lỗi khi đánh dấu tất cả thông báo đã đọc");
                    }
                });
            });

            // Delete all notifications
            $("#confirm-delete-all").click(function () {
                $.ajax({
                    url: '/api/notifications',
                    type: 'DELETE',
                    success: function () {
                        $("#notifications-list").html('<p class="text-muted">Không có thông báo nào.</p>');
                        $("#delete-all-notifications").attr("disabled", "disabled");
                        $("#mark-all-read").attr("disabled", "disabled");
                        unreadCount = 0;
                        updateNotificationBadge();
                        $("#deleteAllModal").modal('hide');
                    },
                    error: function () {
                        $("#deleteAllModal").modal('hide');
                        alert("Lỗi khi xóa tất cả thông báo");
                    }
                });
            });

            // Update notification count in navbar
            function updateNotificationBadge() {
                const $badge = $('#notification-count');
                if (unreadCount > 0) {
                    $badge.text(unreadCount).show();
                } else {
                    $badge.hide();
                }
            }

            // Initial notification count
            $.get('/api/notifications/unread-count', function (count) {
                unreadCount = count;
                updateNotificationBadge();
            });
        });
    </script>
}