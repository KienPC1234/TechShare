@page
@model LoginSystem.Pages.Organization.CreateModel
@{
    ViewData["Title"] = "Tạo Tổ Chức";
}

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6" style="width:150%">
            <div class="card shadow-lg border-0 animate__animated animate__fadeIn">
                <div class="card-header text-white text-center" style="background: linear-gradient(135deg, #007bff, #6610f2);">
                    <div class="d-flex align-items-center justify-content-center">
                        <i class="bi bi-building me-2 fs-3"></i>
                        <h2 class="mb-0 fs-4 fw-bold">Tạo Tổ Chức Mới</h2>
                    </div>
                </div>
                <div class="card-body p-4">
                    <!-- Alerts -->
                    <div id="alertContainer">
                        @if (TempData["ErrorMessage"] != null)
                        {
                            <div class="alert alert-danger alert-dismissible fade show d-flex align-items-center" role="alert">
                                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                @TempData["ErrorMessage"]
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        }
                        @if (TempData["SuccessMessage"] != null)
                        {
                            <div class="alert alert-success alert-dismissible fade show d-flex align-items-center" role="alert">
                                <i class="bi bi-check-circle-fill me-2"></i>
                                @TempData["SuccessMessage"]
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        }
                    </div>

                    <form method="post" enctype="multipart/form-data" id="createOrgForm">
                        @Html.AntiForgeryToken()
                        <!-- Organization Details -->
                        <h5 class="mb-3 fw-semibold text-primary">Thông Tin Tổ Chức</h5>
                        <div class="mb-4 position-relative">
                            <label asp-for="Input.Name" class="form-label fw-bold"></label>
                            <input asp-for="Input.Name" class="form-control" placeholder="Nhập tên tổ chức" maxlength="100" data-bs-toggle="tooltip" title="Tên tổ chức, tối đa 100 ký tự" />
                            <span asp-validation-for="Input.Name" class="text-danger"></span>
                            <small class="form-text text-muted"><span id="nameCounter">0</span>/100 ký tự</small>
                        </div>

                        <div class="mb-4 position-relative">
                            <label asp-for="Input.Terms" class="form-label fw-bold"></label>
                            <textarea asp-for="Input.Terms" class="form-control" rows="4" placeholder="Nhập điều khoản tham gia" maxlength="1000" data-bs-toggle="tooltip" title="Điều khoản tham gia, tối đa 1000 ký tự"></textarea>
                            <span asp-validation-for="Input.Terms" class="text-danger"></span>
                            <small class="form-text text-muted"><span id="termsCounter">0</span>/1000 ký tự</small>
                        </div>

                        <div class="mb-4 form-check">
                            <input asp-for="Input.IsPrivate" class="form-check-input" id="isPrivate" />
                            <label asp-for="Input.IsPrivate" class="form-check-label" for="isPrivate">Tổ chức riêng tư</label>
                            <small class="form-text text-muted d-block" data-bs-toggle="tooltip" title="Tổ chức riêng tư yêu cầu phê duyệt để tham gia">Chọn để giới hạn quyền truy cập</small>
                            <span asp-validation-for="Input.IsPrivate" class="text-danger"></span>
                        </div>

                        <hr class="my-4">

                        <!-- Description -->
                        <h5 class="mb-3 fw-semibold text-primary">Mô Tả Tổ Chức</h5>
                        <div class="mb-4">
                            <label asp-for="Input.Description" class="form-label fw-bold"></label>
                            <textarea asp-for="Input.Description" class="form-control summernote" data-bs-toggle="tooltip" title="Mô tả chi tiết về tổ chức"></textarea>
                            <span asp-validation-for="Input.Description" class="text-danger"></span>
                        </div>

                        <!-- Avatar Upload -->
                        <h5 class="mb-3 fw-semibold text-primary">Ảnh Đại Diện</h5>
                        <div class="mb-4">
                            <label asp-for="Input.Avatar" class="form-label fw-bold"></label>
                            <div class="dropzone border rounded p-3 text-center" id="avatarDropzone" data-bs-toggle="tooltip" title="Kéo thả hoặc nhấp để chọn ảnh">
                                <p class="mb-2 text-muted">Kéo thả ảnh hoặc nhấp để chọn</p>
                                <input asp-for="Input.Avatar" type="file" class="form-control d-none" accept="image/*" id="avatarInput" />
                                <div class="progress mt-2 d-none" id="uploadProgress">
                                    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%;" id="progressBar"></div>
                                </div>
                            </div>
                            <span asp-validation-for="Input.Avatar" class="text-danger"></span>
                            <div class="mt-3 text-center">
                                <img id="avatarPreview" src="/images/default-org-avatar.png" alt="Avatar Preview" class="rounded-circle" style="width: 120px; height: 120px; object-fit: cover;" />
                                <button type="button" class="btn btn-outline-danger btn-sm mt-2 d-none" id="removeAvatar">Xóa ảnh</button>
                            </div>
                        </div>

                        <!-- Form Actions -->
                        <div class="d-flex justify-content-between mt-5">
                            <a href="@Url.Page("/Organization/Index")" class="btn btn-outline-secondary" data-bs-toggle="tooltip" title="Hủy và quay lại danh sách">
                                <i class="bi bi-x-circle me-1"></i> Hủy
                            </a>
                            <button type="submit" class="btn btn-primary" id="submitButton" data-bs-toggle="tooltip" title="Tạo tổ chức mới">
                                <i class="bi bi-plus-circle me-1"></i> Tạo Tổ Chức
                            </button>
                        </div>
                        @Html.RenderCaptchaV2()
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <link href="https://cdn.jsdelivr.net/npm/summernote@0.8.20/dist/summernote.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/summernote@0.8.20/dist/summernote.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Initialize tooltips
            document.querySelectorAll('[data-bs-toggle="tooltip"]').forEach(el => {
                new bootstrap.Tooltip(el);
            });

            // Summernote configuration
            $('.summernote').summernote({
                height: 250,
                minHeight: 150,
                maxHeight: 400,
                toolbar: [
                    ['style', ['style']],
                    ['font', ['bold', 'italic', 'underline', 'clear']],
                    ['fontsize', ['fontsize']],
                    ['color', ['color']],
                    ['para', ['ul', 'ol', 'paragraph']],
                    ['insert', ['link', 'picture']],
                    ['view', ['fullscreen', 'codeview']]
                ],
                placeholder: 'Nhập mô tả tổ chức...',
                callbacks: {
                    onImageUpload: async (files) => {
                        const file = files[0];
                        const formData = new FormData();
                        formData.append('file', file);

                        try {
                            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                            const response = await fetch('/Organization/Create?handler=UploadImage', {
                                method: 'POST',
                                headers: {
                                    'RequestVerificationToken': token
                                },
                                body: formData
                            });

                            if (!response.ok) {
                                throw new Error(`Upload failed: ${response.statusText}`);
                            }

                            const data = await response.json();
                            if (data.location) {
                                $('.summernote').summernote('insertImage', data.location);
                            } else {
                                throw new Error('No image URL returned');
                            }
                        } catch (error) {
                            showAlert('danger', `Không thể upload ảnh: ${error.message}`);
                        }
                    }
                }
            });

            // Toggle Summernote dark mode
            const summernoteDarkMode = localStorage.getItem('summernoteDarkMode') === 'true';
            if (summernoteDarkMode) {
                $('.note-editor').addClass('dark-mode');
            }
            $('.note-toolbar').append('<button type="button" class="btn btn-sm btn-outline-secondary ms-2" id="toggleDarkMode"><i class="bi bi-moon"></i></button>');
            document.getElementById('toggleDarkMode').addEventListener('click', () => {
                $('.note-editor').toggleClass('dark-mode');
                localStorage.setItem('summernoteDarkMode', $('.note-editor').hasClass('dark-mode'));
            });

            // Character counters
            const nameInput = document.getElementById('Input_Name');
            const termsInput = document.getElementById('Input_Terms');
            nameInput.addEventListener('input', () => {
                document.getElementById('nameCounter').textContent = nameInput.value.length;
            });
            termsInput.addEventListener('input', () => {
                document.getElementById('termsCounter').textContent = termsInput.value.length;
            });

            // Drag-and-drop avatar upload
            const dropzone = document.getElementById('avatarDropzone');
            const avatarInput = document.getElementById('avatarInput');
            const avatarPreview = document.getElementById('avatarPreview');
            const removeAvatarBtn = document.getElementById('removeAvatar');
            const progressBar = document.getElementById('progressBar');
            const uploadProgress = document.getElementById('uploadProgress');

            dropzone.addEventListener('dragover', (e) => {
                e.preventDefault();
                dropzone.classList.add('border-primary', 'bg-light');
            });
            dropzone.addEventListener('dragleave', () => {
                dropzone.classList.remove('border-primary', 'bg-light');
            });
            dropzone.addEventListener('drop', (e) => {
                e.preventDefault();
                dropzone.classList.remove('border-primary', 'bg-light');
                const files = e.dataTransfer.files;
                if (files.length) {
                    avatarInput.files = files;
                    previewImage(files[0]);
                    uploadAvatar(files[0]);
                }
            });
            dropzone.addEventListener('click', () => {
                avatarInput.click();
            });

            avatarInput.addEventListener('change', () => {
                if (avatarInput.files.length) {
                    previewImage(avatarInput.files[0]);
                    uploadAvatar(avatarInput.files[0]);
                }
            });

            removeAvatarBtn.addEventListener('click', () => {
                avatarInput.value = '';
                avatarPreview.src = '/images/default-org-avatar.png';
                removeAvatarBtn.classList.add('d-none');
                uploadProgress.classList.add('d-none');
                progressBar.style.width = '0%';
            });

            function previewImage(file) {
                avatarPreview.src = URL.createObjectURL(file);
                removeAvatarBtn.classList.remove('d-none');
            }

            async function uploadAvatar(file) {
                const formData = new FormData();
                formData.append('Input.Avatar', file);

                uploadProgress.classList.remove('d-none');
                progressBar.style.width = '0%';

                try {
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    const xhr = new XMLHttpRequest();
                    const response = await new Promise((resolve, reject) => {
                        xhr.upload.addEventListener('progress', (e) => {
                            if (e.lengthComputable) {
                                const percent = (e.loaded / e.total) * 100;
                                progressBar.style.width = `${percent}%`;
                            }
                        });
                        xhr.addEventListener('load', () => {
                            if (xhr.status >= 200 && xhr.status < 300) {
                                resolve(JSON.parse(xhr.responseText));
                            } else {
                                reject(new Error(`Upload failed: ${xhr.statusText}`));
                            }
                        });
                        xhr.addEventListener('error', () => reject(new Error('Network error')));
                        xhr.open('POST', '/Organization/Create?handler=UploadAvatar');
                        xhr.setRequestHeader('RequestVerificationToken', token);
                        xhr.send(formData);
                    });

                    uploadProgress.classList.add('d-none');
                    progressBar.style.width = '0%';
                } catch (error) {
                    uploadProgress.classList.add('d-none');
                    progressBar.style.width = '0%';
                    showAlert('danger', `Không thể upload ảnh đại diện: ${error.message}`);
                    avatarPreview.src = '/images/default-org-avatar.png';
                    removeAvatarBtn.classList.add('d-none');
                }
            }

            // Form submission loading state
            const form = document.getElementById('createOrgForm');
            const submitButton = document.getElementById('submitButton');
            form.addEventListener('submit', () => {
                submitButton.disabled = true;
                submitButton.innerHTML = '<i class="bi bi-arrow-clockwise me-1"></i> Đang tạo...';
            });

            // Input focus animation
            document.querySelectorAll('.form-control').forEach(input => {
                input.addEventListener('focus', () => input.parentElement.classList.add('focused'));
                input.addEventListener('blur', () => input.parentElement.classList.remove('focused'));
            });

            // Show alerts
            function showAlert(type, message) {
                const alertContainer = document.getElementById('alertContainer');
                alertContainer.innerHTML = `
                    <div class="alert alert-${type} alert-dismissible fade show d-flex align-items-center" role="alert">
                        <i class="bi bi-${type === 'success' ? 'check-circle-fill' : 'exclamation-triangle-fill'} me-2"></i>
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                `;
            }
        });
    </script>
    <style>
        .card {
            transition: transform 0.3s;
        }

            .card:hover {
                transform: translateY(-5px);
            }

        .form-control:focus, .form-control.focused {
            box-shadow: 0 0 10px rgba(0, 123, 255, 0.3);
        }

        .dropzone {
            transition: background-color 0.2s, border-color 0.2s;
        }

            .dropzone:hover, .dropzone.border-primary {
                background-color: #f8f9fa !important;
            }

        .note-editor.dark-mode {
            background: #343a40;
            color: #fff;
        }

            .note-editor.dark-mode .note-editable {
                background: #495057;
                color: #fff;
            }

            .note-editor.dark-mode .note-toolbar {
                background: #212529;
            }

        .animate__fadeIn {
            animation: fadeIn 0.5s;
        }
        @@keyframes fadeIn {
            from

        {
            opacity: 0;
        }

        to {
            opacity: 1;
        }

        }
    </style>
}