@page
@model LoginSystem.Pages.ChatModel
@{
    ViewData["Title"] = "Chat";
}
<div class="container mt-4">
    <div class="row">
        <!-- User List -->
        <div class="col-md-4">
            <h3 class="mb-3">Người Dùng</h3>
            <div class="input-group mb-3">
                <input type="text" class="form-control" placeholder="Tìm kiếm theo tên..." data-bind="textInput: searchQuery">
                <button class="btn btn-primary" data-bind="click: searchUsers, enable: !isSearching()">Tìm</button>
            </div>
            <div data-bind="visible: errorMessage" class="alert alert-danger" role="alert" data-bind="text: errorMessage"></div>
            <div class="list-group" data-bind="foreach: users" style="max-height: 500px; overflow-y: auto;">
                <div class="list-group-item list-group-item-action d-flex align-items-center mb-2 rounded user-card"
                     data-bind="click: $parent.selectUser, css: { 'active': $data.id === $parent.selectedUserId }">
                    <img data-bind="attr: { src: $data.avatarUrl || '/images/default-avatar.png' }"
                         class="rounded-circle me-3" style="width: 50px; height: 50px;" alt="Avatar">
                    <div class="flex-grow-1">
                        <strong data-bind="text: $data.displayName || $data.userName || 'Unknown'"></strong>
                        <!-- ko if: $parent.onlineUsers().includes($data.id) -->
                        <span class="online-indicator ms-2"></span>
                        <!-- /ko -->
                        <br>
                        <small class="text-muted" data-bind="text: $data.userName || 'No Username'"></small>
                    </div>
                </div>
            </div>
        </div>
        <!-- Chat Area -->
        <div class="col-md-8">
            <h3 class="mb-3">Chat với <span data-bind="text: selectedUserName"></span></h3>
            <div class="card shadow-sm">
                <div class="card-body chat-body" style="height: 500px; overflow-y: auto;">
                    <div data-bind="foreach: messages">
                        <div class="message mb-3 fade-in"
                             data-bind="css: { 'ms-auto': senderId === '@Model.CurrentUserId', 'me-3': senderId !== '@Model.CurrentUserId' }">
                            <div class="d-flex"
                                 data-bind="css: { 'flex-row-reverse': senderId === '@Model.CurrentUserId' }">
                                <img data-bind="attr: { src: senderAvatar || '/images/default-avatar.png' }"
                                     class="rounded-circle mt-2" style="width: 35px; height: 35px;">
                                <div class="ms-2 me-2">
                                    <div class="message-bubble rounded"
                                         data-bind="css: { 'bg-primary text-white': senderId === '@Model.CurrentUserId', 'bg-light border': senderId !== '@Model.CurrentUserId' }">
                                        <!-- ko if: contentType === 'text' -->
                                        <div class="p-2">
                                            <span data-bind="text: content"></span>
                                        </div>
                                        <!-- /ko -->
                                        <!-- ko if: contentType === 'image' -->
                                        <div class="p-1">
                                            <img data-bind="attr: { src: content }" style="max-width: 250px; width: 100%; border-radius: 4px;" alt="Image">
                                        </div>
                                        <!-- /ko -->
                                        <!-- ko if: contentType === 'video' -->
                                        <div class="p-1">
                                            <video controls style="max-width: 250px; width: 100%; border-radius: 4px;">
                                                <source data-bind="attr: { src: content }" type="video/mp4">
                                                Your browser does not support the video tag.
                                            </video>
                                        </div>
                                        <!-- /ko -->
                                    </div>
                                    <small class="text-muted d-block"
                                           data-bind="text: new Date(createdAt).toLocaleString('vi-VN', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' })"></small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <div data-bind="visible: selectedUserId">
                        <div class="input-group mb-2">
                            <input type="text" class="form-control" placeholder="Nhập tin nhắn..."
                                   data-bind="textInput: newMessage, enable: selectedUserId, event: { keyup: handleEnter }">
                            <button class="btn btn-primary"
                                    data-bind="click: sendMessage, enable: selectedUserId() && newMessage().length > 0">
                                Gửi
                            </button>
                        </div>
                        <div class="input-group mb-2">
                            <input type="file" class="form-control" id="fileUpload"
                                   accept="image/jpeg,image/png,image/gif,image/webp,video/mp4,video/webm,video/ogg"
                                   data-bind="enable: selectedUserId, event: { change: fileSelected }">
                            <button class="btn btn-primary"
                                    data-bind="click: uploadFile, enable: selectedUserId() && hasFile()">
                                Tải Lên
                            </button>
                        </div>
                        <div data-bind="visible: hasFile">
                            <div id="file-preview" class="mb-2"></div>
                            <div class="progress">
                                <div id="upload-progress" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                            </div>
                        </div>
                        <small class="text-muted">Chọn hình ảnh hoặc video để tải lên (tối đa 10MB).</small>
                    </div>
                    <div data-bind="visible: !selectedUserId()">
                        <p class="text-muted">Vui lòng chọn một người dùng để bắt đầu chat.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .user-card {
        transition: background-color 0.2s, transform 0.2s;
        cursor: pointer;
        border: none;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

        .user-card:hover {
            background-color: #f1f3f5;
            transform: translateY(-2px);
        }

        .user-card.active {
            background-color: #e9ecef;
            border-left: 4px solid #007bff;
        }

    .online-indicator {
        display: inline-block;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        background-color: limegreen;
    }

    .message-bubble {
        max-width: 70%;
        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        overflow: hidden;
    }

    .chat-body {
        background-color: #f8f9fa;
    }

    .fade-in {
        animation: fadeIn 0.3s ease-in;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    #file-preview img, #file-preview video {
        max-width: 150px;
        max-height: 100px;
        border-radius: 4px;
    }
</style>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/knockout@3.5.1/build/output/knockout-latest.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@8.0.7/dist/browser/signalr.min.js"></script>
    <script>
        function ChatViewModel() {
            var self = this;
            self.searchQuery = ko.observable('');
            self.users = ko.observableArray([]);
            self.messages = ko.observableArray([]);
            self.newMessage = ko.observable('');
            self.selectedUserId = ko.observable(null);
            self.selectedUserName = ko.observable('');
            self.currentUserId = '@Model.CurrentUserId';
            self.isSearching = ko.observable(false);
            self.errorMessage = ko.observable('');
            self.onlineUsers = ko.observableArray([]);
            self.hasFile = ko.observable(false);
            self.initialUserId = '@Model.InitialUserId';
            let searchAbortController = null;
            let searchTimeout = null;

            // SignalR connection
            const connection = new signalR.HubConnectionBuilder()
                .withUrl('/mesHub')
                .withAutomaticReconnect()
                .build();

            connection.on('ReceiveMessage', function (message) {
                console.log('Received message:', {
                    id: message.id,
                    senderId: message.senderId,
                    content: message.content ? message.content.substring(0, 10) + '...' : '[media]',
                    contentType: message.contentType
                });
                if (message.senderId === self.selectedUserId() || message.senderId === self.currentUserId) {
                    self.messages.push(message);
                    scrollToBottom();
                }
            });

            connection.on('UserConnected', function (userId) {
                console.log('User connected:', userId);
                if (!self.onlineUsers().includes(userId)) {
                    self.onlineUsers.push(userId);
                }
            });

            connection.on('UserDisconnected', function (userId) {
                console.log('User disconnected:', userId);
                self.onlineUsers.remove(userId);
            });

            connection.on('UpdateOnlineUsers', function (onlineUserIds) {
                console.log('Online users updated:', onlineUserIds.length, 'users');
                self.onlineUsers(onlineUserIds);
            });

            connection.start().catch(function (err) {
                console.error('SignalR connection error:', err.toString());
                self.errorMessage('Không thể kết nối đến server chat. Vui lòng làm mới trang.');
            });

            function scrollToBottom() {
                const chatBody = document.querySelector('.chat-body');
                chatBody.scrollTop = chatBody.scrollHeight;
            }

            // Fetch single user by ID
            self.fetchUserById = function (userId) {
                return fetch(`/api/chat/users/${userId}`)
                    .then(response => {
                        if (!response.ok) throw new Error(`HTTP ${response.status}`);
                        return response.json();
                    })
                    .then(user => {
                        if (!self.users().some(u => u.id === user.id)) {
                            self.users.push(user);
                        }
                        return user;
                    })
                    .catch(err => {
                        console.error('Error fetching user:', userId, err.message);
                        self.errorMessage('Không thể tải thông tin người dùng: ' + err.message);
                        return null;
                    });
            };

            // Load first 50 users
            self.loadDefaultUsers = function () {
                self.isSearching(true);
                self.errorMessage('');
                if (searchAbortController) {
                    searchAbortController.abort();
                }
                searchAbortController = new AbortController();
                fetch('/api/chat/users', { signal: searchAbortController.signal })
                    .then(response => {
                        if (!response.ok) throw new Error(`HTTP ${response.status}`);
                        return response.json();
                    })
                    .then(data => {
                        console.log('Loaded users:', data.length);
                        self.users(data);
                        if (self.initialUserId) {
                            const user = data.find(u => u.id === self.initialUserId);
                            if (user) {
                                self.selectUser(user);
                            } else {
                                // Fetch user by ID if not in initial list
                                self.fetchUserById(self.initialUserId).then(user => {
                                    if (user) {
                                        self.selectUser(user);
                                    }
                                });
                            }
                        }
                    })
                    .catch(err => {
                        if (err.name === 'AbortError') return;
                        console.error('Error loading users:', err.message);
                        self.errorMessage('Không thể tải danh sách người dùng: ' + err.message);
                    })
                    .finally(() => {
                        self.isSearching(false);
                        searchAbortController = null;
                    });
            };

            // Search users with debounce
            self.searchUsers = function () {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    self.isSearching(true);
                    self.errorMessage('');
                    const query = self.searchQuery().trim();
                    if (searchAbortController) {
                        searchAbortController.abort();
                    }
                    searchAbortController = new AbortController();
                    const url = query ? `/api/chat/users/search?query=${encodeURIComponent(query)}` : '/api/chat/users';
                    fetch(url, { signal: searchAbortController.signal })
                        .then(response => {
                            if (!response.ok) throw new Error(`HTTP ${response.status}`);
                            return response.json();
                        })
                        .then(data => {
                            console.log('Search results:', data.length);
                            self.users(data);
                        })
                        .catch(err => {
                            if (err.name === 'AbortError') return;
                            console.error('Search error:', err.message);
                            self.errorMessage('Tìm kiếm thất bại: ' + err.message);
                        })
                        .finally(() => {
                            self.isSearching(false);
                            searchAbortController = null;
                        });
                }, 300);
            };

            // Select a user
            self.selectUser = function (user) {
                console.log('Selected user:', user.id);
                self.selectedUserId(user.id);
                self.selectedUserName(user.displayName || user.userName || 'Unknown');
                self.messages([]);
                fetch(`/api/chat/messages?receiverId=${user.id}`)
                    .then(response => {
                        if (!response.ok) throw new Error(`HTTP ${response.status}`);
                        return response.json();
                    })
                    .then(data => {
                        console.log('Loaded messages:', data.length);
                        self.messages(data);
                        scrollToBottom();
                    })
                    .catch(err => {
                        console.error('Error loading messages:', err.message);
                        self.errorMessage('Không thể tải tin nhắn: ' + err.message);
                    });
            };

            // Handle Enter key
            self.handleEnter = function (data, event) {
                if (event.key === 'Enter' && !event.shiftKey) {
                    event.preventDefault();
                    self.sendMessage();
                    return false;
                }
                return true;
            };

            // Handle file selection
            self.fileSelected = function (data, event) {
                const fileInput = event.target;
                const file = fileInput.files[0];
                console.log('File selected:', {
                    fileName: file?.name,
                    fileSize: file?.size,
                    fileType: file?.type
                });
                self.hasFile(file && fileInput.files.length > 0);
                const preview = document.getElementById('file-preview');
                preview.innerHTML = '';
                if (file) {
                    if (file.type.startsWith('image/')) {
                        const img = document.createElement('img');
                        img.src = URL.createObjectURL(file);
                        preview.appendChild(img);
                    } else if (file.type.startsWith('video/')) {
                        const video = document.createElement('video');
                        video.src = URL.createObjectURL(file);
                        video.controls = true;
                        preview.appendChild(video);
                    }
                }
            };

            // Send text message
            self.sendMessage = function () {
                if (!self.newMessage() || !self.selectedUserId()) {
                    console.warn('Cannot send: Empty message or no user');
                    return;
                }
                const message = self.newMessage().trim();
                if (!message) {
                    console.warn('Cannot send: Empty message after trim');
                    self.errorMessage('Tin nhắn không được để trống.');
                    return;
                }
                console.log('Sending message:', {
                    senderId: self.currentUserId,
                    receiverId: self.selectedUserId(),
                    contentLength: message.length,
                    contentType: 'text'
                });
                connection.invoke('SendMessage', self.currentUserId, self.selectedUserId(), message, 'text')
                    .then(() => {
                        console.log('Message sent');
                        self.newMessage('');
                    })
                    .catch(err => {
                        console.error('Send message error:', err.message);
                        self.errorMessage('Không thể gửi tin nhắn: ' + err.message);
                    });
            };

            // Upload file
            self.uploadFile = function () {
                const fileInput = document.getElementById('fileUpload');
                const file = fileInput.files[0];
                console.log('Upload attempted:', {
                    fileName: file?.name,
                    fileSize: file?.size,
                    fileType: file?.type
                });
                if (!file || !self.selectedUserId()) {
                    console.warn('Cannot upload: No file or no user');
                    self.errorMessage('Vui lòng chọn file và người nhận.');
                    return;
                }
                const maxSize = 10 * 1024 * 1024; // 10MB
                if (file.size > maxSize) {
                    console.warn('File too large:', file.size);
                    self.errorMessage('Kích thước file vượt quá 10MB.');
                    return;
                }
                const formData = new FormData();
                formData.append('file', file);
                const progressBar = document.getElementById('upload-progress');
                progressBar.style.width = '0%';
                progressBar.setAttribute('aria-valuenow', 0);
                const xhr = new XMLHttpRequest();
                xhr.upload.addEventListener('progress', function (e) {
                    if (e.lengthComputable) {
                        const percent = (e.loaded / e.total) * 100;
                        progressBar.style.width = percent + '%';
                        progressBar.setAttribute('aria-valuenow', percent);
                    }
                });
                xhr.open('POST', '/api/chat/upload');
                xhr.onload = function () {
                    if (xhr.status >= 200 && xhr.status < 300) {
                        const data = JSON.parse(xhr.responseText);
                        console.log('File uploaded:', data.fileUrl);
                        const content = data.fileUrl;
                        const contentType = file.type.startsWith('image/') ? 'image' : 'video';
                        console.log('Sending file message:', {
                            senderId: self.currentUserId,
                            receiverId: self.selectedUserId(),
                            contentType
                        });
                        connection.invoke('SendMessage', self.currentUserId, self.selectedUserId(), content, contentType)
                            .then(() => {
                                console.log('File message sent');
                                self.hasFile(false);
                                fileInput.value = '';
                                document.getElementById('file-preview').innerHTML = '';
                                progressBar.style.width = '0%';
                            })
                            .catch(err => {
                                console.error('Send file message error:', err.message);
                                self.errorMessage('Không thể gửi file: ' + err.message);
                            });
                    } else {
                        console.error('File upload error:', xhr.status);
                        self.errorMessage('Tải file thất bại: ' + xhr.statusText);
                    }
                };
                xhr.onerror = function () {
                    console.error('File upload error');
                    self.errorMessage('Tải file thất bại.');
                };
                xhr.send(formData);
            };

            // Initialize
            self.loadDefaultUsers();
        }

        ko.applyBindings(new ChatViewModel());
    </script>
}